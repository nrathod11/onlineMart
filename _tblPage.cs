
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace BusinessLayer
{
	public abstract class _tblPage : SqlClientEntity
	{
		public _tblPage()
		{
			this.QuerySource = "tblPage";
			this.MappingName = "tblPage";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblPageLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int AppPageId)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.AppPageId, AppPageId);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblPageLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter AppPageId
			{
				get
				{
					return new SqlParameter("@AppPageId", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AppPageTitle
			{
				get
				{
					return new SqlParameter("@AppPageTitle", SqlDbType.NVarChar, 300);
				}
			}
			
			public static SqlParameter AppPageHeading
			{
				get
				{
					return new SqlParameter("@AppPageHeading", SqlDbType.NVarChar, 300);
				}
			}
			
			public static SqlParameter AppPageName
			{
				get
				{
					return new SqlParameter("@AppPageName", SqlDbType.NVarChar, 300);
				}
			}
			
			public static SqlParameter AppAlias
			{
				get
				{
					return new SqlParameter("@AppAlias", SqlDbType.NVarChar, 300);
				}
			}
			
			public static SqlParameter AppIsLink
			{
				get
				{
					return new SqlParameter("@AppIsLink", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AppLinkURL
			{
				get
				{
					return new SqlParameter("@AppLinkURL", SqlDbType.NVarChar, 300);
				}
			}
			
			public static SqlParameter AppPageFormatId
			{
				get
				{
					return new SqlParameter("@AppPageFormatId", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AppIsOpenInNewTab
			{
				get
				{
					return new SqlParameter("@AppIsOpenInNewTab", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AppPageContent
			{
				get
				{
					return new SqlParameter("@AppPageContent", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter AppSEOWord
			{
				get
				{
					return new SqlParameter("@AppSEOWord", SqlDbType.NVarChar, 300);
				}
			}
			
			public static SqlParameter AppSEODescription
			{
				get
				{
					return new SqlParameter("@AppSEODescription", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter AppCreatedDate
			{
				get
				{
					return new SqlParameter("@AppCreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter AppCreatedBy
			{
				get
				{
					return new SqlParameter("@AppCreatedBy", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AppIsDefault
			{
				get
				{
					return new SqlParameter("@AppIsDefault", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AppDynamicParameters
			{
				get
				{
					return new SqlParameter("@AppDynamicParameters", SqlDbType.VarChar, 2147483647);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string AppPageId = "appPageId";
            public const string AppPageTitle = "appPageTitle";
            public const string AppPageHeading = "appPageHeading";
            public const string AppPageName = "appPageName";
            public const string AppAlias = "appAlias";
            public const string AppIsLink = "appIsLink";
            public const string AppLinkURL = "appLinkURL";
            public const string AppPageFormatId = "appPageFormatId";
            public const string AppIsOpenInNewTab = "appIsOpenInNewTab";
            public const string AppPageContent = "appPageContent";
            public const string AppSEOWord = "appSEOWord";
            public const string AppSEODescription = "appSEODescription";
            public const string AppCreatedDate = "appCreatedDate";
            public const string AppCreatedBy = "appCreatedBy";
            public const string AppIsDefault = "appIsDefault";
            public const string AppDynamicParameters = "appDynamicParameters";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[AppPageId] = _tblPage.PropertyNames.AppPageId;
					ht[AppPageTitle] = _tblPage.PropertyNames.AppPageTitle;
					ht[AppPageHeading] = _tblPage.PropertyNames.AppPageHeading;
					ht[AppPageName] = _tblPage.PropertyNames.AppPageName;
					ht[AppAlias] = _tblPage.PropertyNames.AppAlias;
					ht[AppIsLink] = _tblPage.PropertyNames.AppIsLink;
					ht[AppLinkURL] = _tblPage.PropertyNames.AppLinkURL;
					ht[AppPageFormatId] = _tblPage.PropertyNames.AppPageFormatId;
					ht[AppIsOpenInNewTab] = _tblPage.PropertyNames.AppIsOpenInNewTab;
					ht[AppPageContent] = _tblPage.PropertyNames.AppPageContent;
					ht[AppSEOWord] = _tblPage.PropertyNames.AppSEOWord;
					ht[AppSEODescription] = _tblPage.PropertyNames.AppSEODescription;
					ht[AppCreatedDate] = _tblPage.PropertyNames.AppCreatedDate;
					ht[AppCreatedBy] = _tblPage.PropertyNames.AppCreatedBy;
					ht[AppIsDefault] = _tblPage.PropertyNames.AppIsDefault;
					ht[AppDynamicParameters] = _tblPage.PropertyNames.AppDynamicParameters;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string AppPageId = "AppPageId";
            public const string AppPageTitle = "AppPageTitle";
            public const string AppPageHeading = "AppPageHeading";
            public const string AppPageName = "AppPageName";
            public const string AppAlias = "AppAlias";
            public const string AppIsLink = "AppIsLink";
            public const string AppLinkURL = "AppLinkURL";
            public const string AppPageFormatId = "AppPageFormatId";
            public const string AppIsOpenInNewTab = "AppIsOpenInNewTab";
            public const string AppPageContent = "AppPageContent";
            public const string AppSEOWord = "AppSEOWord";
            public const string AppSEODescription = "AppSEODescription";
            public const string AppCreatedDate = "AppCreatedDate";
            public const string AppCreatedBy = "AppCreatedBy";
            public const string AppIsDefault = "AppIsDefault";
            public const string AppDynamicParameters = "AppDynamicParameters";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[AppPageId] = _tblPage.ColumnNames.AppPageId;
					ht[AppPageTitle] = _tblPage.ColumnNames.AppPageTitle;
					ht[AppPageHeading] = _tblPage.ColumnNames.AppPageHeading;
					ht[AppPageName] = _tblPage.ColumnNames.AppPageName;
					ht[AppAlias] = _tblPage.ColumnNames.AppAlias;
					ht[AppIsLink] = _tblPage.ColumnNames.AppIsLink;
					ht[AppLinkURL] = _tblPage.ColumnNames.AppLinkURL;
					ht[AppPageFormatId] = _tblPage.ColumnNames.AppPageFormatId;
					ht[AppIsOpenInNewTab] = _tblPage.ColumnNames.AppIsOpenInNewTab;
					ht[AppPageContent] = _tblPage.ColumnNames.AppPageContent;
					ht[AppSEOWord] = _tblPage.ColumnNames.AppSEOWord;
					ht[AppSEODescription] = _tblPage.ColumnNames.AppSEODescription;
					ht[AppCreatedDate] = _tblPage.ColumnNames.AppCreatedDate;
					ht[AppCreatedBy] = _tblPage.ColumnNames.AppCreatedBy;
					ht[AppIsDefault] = _tblPage.ColumnNames.AppIsDefault;
					ht[AppDynamicParameters] = _tblPage.ColumnNames.AppDynamicParameters;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string AppPageId = "s_AppPageId";
            public const string AppPageTitle = "s_AppPageTitle";
            public const string AppPageHeading = "s_AppPageHeading";
            public const string AppPageName = "s_AppPageName";
            public const string AppAlias = "s_AppAlias";
            public const string AppIsLink = "s_AppIsLink";
            public const string AppLinkURL = "s_AppLinkURL";
            public const string AppPageFormatId = "s_AppPageFormatId";
            public const string AppIsOpenInNewTab = "s_AppIsOpenInNewTab";
            public const string AppPageContent = "s_AppPageContent";
            public const string AppSEOWord = "s_AppSEOWord";
            public const string AppSEODescription = "s_AppSEODescription";
            public const string AppCreatedDate = "s_AppCreatedDate";
            public const string AppCreatedBy = "s_AppCreatedBy";
            public const string AppIsDefault = "s_AppIsDefault";
            public const string AppDynamicParameters = "s_AppDynamicParameters";

		}
		#endregion		
		
		#region Properties
	
		public virtual int AppPageId
	    {
			get
	        {
				return base.Getint(ColumnNames.AppPageId);
			}
			set
	        {
				base.Setint(ColumnNames.AppPageId, value);
			}
		}

		public virtual string AppPageTitle
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppPageTitle);
			}
			set
	        {
				base.Setstring(ColumnNames.AppPageTitle, value);
			}
		}

		public virtual string AppPageHeading
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppPageHeading);
			}
			set
	        {
				base.Setstring(ColumnNames.AppPageHeading, value);
			}
		}

		public virtual string AppPageName
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppPageName);
			}
			set
	        {
				base.Setstring(ColumnNames.AppPageName, value);
			}
		}

		public virtual string AppAlias
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppAlias);
			}
			set
	        {
				base.Setstring(ColumnNames.AppAlias, value);
			}
		}

		public virtual bool AppIsLink
	    {
			get
	        {
				return base.Getbool(ColumnNames.AppIsLink);
			}
			set
	        {
				base.Setbool(ColumnNames.AppIsLink, value);
			}
		}

		public virtual string AppLinkURL
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppLinkURL);
			}
			set
	        {
				base.Setstring(ColumnNames.AppLinkURL, value);
			}
		}

		public virtual int AppPageFormatId
	    {
			get
	        {
				return base.Getint(ColumnNames.AppPageFormatId);
			}
			set
	        {
				base.Setint(ColumnNames.AppPageFormatId, value);
			}
		}

		public virtual bool AppIsOpenInNewTab
	    {
			get
	        {
				return base.Getbool(ColumnNames.AppIsOpenInNewTab);
			}
			set
	        {
				base.Setbool(ColumnNames.AppIsOpenInNewTab, value);
			}
		}

		public virtual string AppPageContent
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppPageContent);
			}
			set
	        {
				base.Setstring(ColumnNames.AppPageContent, value);
			}
		}

		public virtual string AppSEOWord
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppSEOWord);
			}
			set
	        {
				base.Setstring(ColumnNames.AppSEOWord, value);
			}
		}

		public virtual string AppSEODescription
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppSEODescription);
			}
			set
	        {
				base.Setstring(ColumnNames.AppSEODescription, value);
			}
		}

		public virtual DateTime AppCreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.AppCreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.AppCreatedDate, value);
			}
		}

		public virtual int AppCreatedBy
	    {
			get
	        {
				return base.Getint(ColumnNames.AppCreatedBy);
			}
			set
	        {
				base.Setint(ColumnNames.AppCreatedBy, value);
			}
		}

		public virtual bool AppIsDefault
	    {
			get
	        {
				return base.Getbool(ColumnNames.AppIsDefault);
			}
			set
	        {
				base.Setbool(ColumnNames.AppIsDefault, value);
			}
		}

		public virtual string AppDynamicParameters
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppDynamicParameters);
			}
			set
	        {
				base.Setstring(ColumnNames.AppDynamicParameters, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_AppPageId
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppPageId) ? string.Empty : base.GetintAsString(ColumnNames.AppPageId);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppPageId);
				else
					this.AppPageId = base.SetintAsString(ColumnNames.AppPageId, value);
			}
		}

		public virtual string s_AppPageTitle
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppPageTitle) ? string.Empty : base.GetstringAsString(ColumnNames.AppPageTitle);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppPageTitle);
				else
					this.AppPageTitle = base.SetstringAsString(ColumnNames.AppPageTitle, value);
			}
		}

		public virtual string s_AppPageHeading
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppPageHeading) ? string.Empty : base.GetstringAsString(ColumnNames.AppPageHeading);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppPageHeading);
				else
					this.AppPageHeading = base.SetstringAsString(ColumnNames.AppPageHeading, value);
			}
		}

		public virtual string s_AppPageName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppPageName) ? string.Empty : base.GetstringAsString(ColumnNames.AppPageName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppPageName);
				else
					this.AppPageName = base.SetstringAsString(ColumnNames.AppPageName, value);
			}
		}

		public virtual string s_AppAlias
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppAlias) ? string.Empty : base.GetstringAsString(ColumnNames.AppAlias);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppAlias);
				else
					this.AppAlias = base.SetstringAsString(ColumnNames.AppAlias, value);
			}
		}

		public virtual string s_AppIsLink
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppIsLink) ? string.Empty : base.GetboolAsString(ColumnNames.AppIsLink);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppIsLink);
				else
					this.AppIsLink = base.SetboolAsString(ColumnNames.AppIsLink, value);
			}
		}

		public virtual string s_AppLinkURL
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppLinkURL) ? string.Empty : base.GetstringAsString(ColumnNames.AppLinkURL);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppLinkURL);
				else
					this.AppLinkURL = base.SetstringAsString(ColumnNames.AppLinkURL, value);
			}
		}

		public virtual string s_AppPageFormatId
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppPageFormatId) ? string.Empty : base.GetintAsString(ColumnNames.AppPageFormatId);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppPageFormatId);
				else
					this.AppPageFormatId = base.SetintAsString(ColumnNames.AppPageFormatId, value);
			}
		}

		public virtual string s_AppIsOpenInNewTab
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppIsOpenInNewTab) ? string.Empty : base.GetboolAsString(ColumnNames.AppIsOpenInNewTab);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppIsOpenInNewTab);
				else
					this.AppIsOpenInNewTab = base.SetboolAsString(ColumnNames.AppIsOpenInNewTab, value);
			}
		}

		public virtual string s_AppPageContent
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppPageContent) ? string.Empty : base.GetstringAsString(ColumnNames.AppPageContent);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppPageContent);
				else
					this.AppPageContent = base.SetstringAsString(ColumnNames.AppPageContent, value);
			}
		}

		public virtual string s_AppSEOWord
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppSEOWord) ? string.Empty : base.GetstringAsString(ColumnNames.AppSEOWord);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppSEOWord);
				else
					this.AppSEOWord = base.SetstringAsString(ColumnNames.AppSEOWord, value);
			}
		}

		public virtual string s_AppSEODescription
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppSEODescription) ? string.Empty : base.GetstringAsString(ColumnNames.AppSEODescription);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppSEODescription);
				else
					this.AppSEODescription = base.SetstringAsString(ColumnNames.AppSEODescription, value);
			}
		}

		public virtual string s_AppCreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppCreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.AppCreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppCreatedDate);
				else
					this.AppCreatedDate = base.SetDateTimeAsString(ColumnNames.AppCreatedDate, value);
			}
		}

		public virtual string s_AppCreatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppCreatedBy) ? string.Empty : base.GetintAsString(ColumnNames.AppCreatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppCreatedBy);
				else
					this.AppCreatedBy = base.SetintAsString(ColumnNames.AppCreatedBy, value);
			}
		}

		public virtual string s_AppIsDefault
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppIsDefault) ? string.Empty : base.GetboolAsString(ColumnNames.AppIsDefault);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppIsDefault);
				else
					this.AppIsDefault = base.SetboolAsString(ColumnNames.AppIsDefault, value);
			}
		}

		public virtual string s_AppDynamicParameters
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppDynamicParameters) ? string.Empty : base.GetstringAsString(ColumnNames.AppDynamicParameters);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppDynamicParameters);
				else
					this.AppDynamicParameters = base.SetstringAsString(ColumnNames.AppDynamicParameters, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter AppPageId
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppPageId, Parameters.AppPageId);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppPageTitle
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppPageTitle, Parameters.AppPageTitle);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppPageHeading
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppPageHeading, Parameters.AppPageHeading);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppPageName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppPageName, Parameters.AppPageName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppAlias
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppAlias, Parameters.AppAlias);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppIsLink
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppIsLink, Parameters.AppIsLink);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppLinkURL
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppLinkURL, Parameters.AppLinkURL);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppPageFormatId
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppPageFormatId, Parameters.AppPageFormatId);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppIsOpenInNewTab
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppIsOpenInNewTab, Parameters.AppIsOpenInNewTab);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppPageContent
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppPageContent, Parameters.AppPageContent);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppSEOWord
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppSEOWord, Parameters.AppSEOWord);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppSEODescription
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppSEODescription, Parameters.AppSEODescription);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppCreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppCreatedDate, Parameters.AppCreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppCreatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppCreatedBy, Parameters.AppCreatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppIsDefault
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppIsDefault, Parameters.AppIsDefault);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppDynamicParameters
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppDynamicParameters, Parameters.AppDynamicParameters);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter AppPageId
		    {
				get
		        {
					if(_AppPageId_W == null)
	        	    {
						_AppPageId_W = TearOff.AppPageId;
					}
					return _AppPageId_W;
				}
			}

			public WhereParameter AppPageTitle
		    {
				get
		        {
					if(_AppPageTitle_W == null)
	        	    {
						_AppPageTitle_W = TearOff.AppPageTitle;
					}
					return _AppPageTitle_W;
				}
			}

			public WhereParameter AppPageHeading
		    {
				get
		        {
					if(_AppPageHeading_W == null)
	        	    {
						_AppPageHeading_W = TearOff.AppPageHeading;
					}
					return _AppPageHeading_W;
				}
			}

			public WhereParameter AppPageName
		    {
				get
		        {
					if(_AppPageName_W == null)
	        	    {
						_AppPageName_W = TearOff.AppPageName;
					}
					return _AppPageName_W;
				}
			}

			public WhereParameter AppAlias
		    {
				get
		        {
					if(_AppAlias_W == null)
	        	    {
						_AppAlias_W = TearOff.AppAlias;
					}
					return _AppAlias_W;
				}
			}

			public WhereParameter AppIsLink
		    {
				get
		        {
					if(_AppIsLink_W == null)
	        	    {
						_AppIsLink_W = TearOff.AppIsLink;
					}
					return _AppIsLink_W;
				}
			}

			public WhereParameter AppLinkURL
		    {
				get
		        {
					if(_AppLinkURL_W == null)
	        	    {
						_AppLinkURL_W = TearOff.AppLinkURL;
					}
					return _AppLinkURL_W;
				}
			}

			public WhereParameter AppPageFormatId
		    {
				get
		        {
					if(_AppPageFormatId_W == null)
	        	    {
						_AppPageFormatId_W = TearOff.AppPageFormatId;
					}
					return _AppPageFormatId_W;
				}
			}

			public WhereParameter AppIsOpenInNewTab
		    {
				get
		        {
					if(_AppIsOpenInNewTab_W == null)
	        	    {
						_AppIsOpenInNewTab_W = TearOff.AppIsOpenInNewTab;
					}
					return _AppIsOpenInNewTab_W;
				}
			}

			public WhereParameter AppPageContent
		    {
				get
		        {
					if(_AppPageContent_W == null)
	        	    {
						_AppPageContent_W = TearOff.AppPageContent;
					}
					return _AppPageContent_W;
				}
			}

			public WhereParameter AppSEOWord
		    {
				get
		        {
					if(_AppSEOWord_W == null)
	        	    {
						_AppSEOWord_W = TearOff.AppSEOWord;
					}
					return _AppSEOWord_W;
				}
			}

			public WhereParameter AppSEODescription
		    {
				get
		        {
					if(_AppSEODescription_W == null)
	        	    {
						_AppSEODescription_W = TearOff.AppSEODescription;
					}
					return _AppSEODescription_W;
				}
			}

			public WhereParameter AppCreatedDate
		    {
				get
		        {
					if(_AppCreatedDate_W == null)
	        	    {
						_AppCreatedDate_W = TearOff.AppCreatedDate;
					}
					return _AppCreatedDate_W;
				}
			}

			public WhereParameter AppCreatedBy
		    {
				get
		        {
					if(_AppCreatedBy_W == null)
	        	    {
						_AppCreatedBy_W = TearOff.AppCreatedBy;
					}
					return _AppCreatedBy_W;
				}
			}

			public WhereParameter AppIsDefault
		    {
				get
		        {
					if(_AppIsDefault_W == null)
	        	    {
						_AppIsDefault_W = TearOff.AppIsDefault;
					}
					return _AppIsDefault_W;
				}
			}

			public WhereParameter AppDynamicParameters
		    {
				get
		        {
					if(_AppDynamicParameters_W == null)
	        	    {
						_AppDynamicParameters_W = TearOff.AppDynamicParameters;
					}
					return _AppDynamicParameters_W;
				}
			}

			private WhereParameter _AppPageId_W = null;
			private WhereParameter _AppPageTitle_W = null;
			private WhereParameter _AppPageHeading_W = null;
			private WhereParameter _AppPageName_W = null;
			private WhereParameter _AppAlias_W = null;
			private WhereParameter _AppIsLink_W = null;
			private WhereParameter _AppLinkURL_W = null;
			private WhereParameter _AppPageFormatId_W = null;
			private WhereParameter _AppIsOpenInNewTab_W = null;
			private WhereParameter _AppPageContent_W = null;
			private WhereParameter _AppSEOWord_W = null;
			private WhereParameter _AppSEODescription_W = null;
			private WhereParameter _AppCreatedDate_W = null;
			private WhereParameter _AppCreatedBy_W = null;
			private WhereParameter _AppIsDefault_W = null;
			private WhereParameter _AppDynamicParameters_W = null;

			public void WhereClauseReset()
			{
				_AppPageId_W = null;
				_AppPageTitle_W = null;
				_AppPageHeading_W = null;
				_AppPageName_W = null;
				_AppAlias_W = null;
				_AppIsLink_W = null;
				_AppLinkURL_W = null;
				_AppPageFormatId_W = null;
				_AppIsOpenInNewTab_W = null;
				_AppPageContent_W = null;
				_AppSEOWord_W = null;
				_AppSEODescription_W = null;
				_AppCreatedDate_W = null;
				_AppCreatedBy_W = null;
				_AppIsDefault_W = null;
				_AppDynamicParameters_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter AppPageId
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppPageId, Parameters.AppPageId);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppPageTitle
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppPageTitle, Parameters.AppPageTitle);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppPageHeading
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppPageHeading, Parameters.AppPageHeading);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppPageName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppPageName, Parameters.AppPageName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppAlias
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppAlias, Parameters.AppAlias);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppIsLink
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppIsLink, Parameters.AppIsLink);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppLinkURL
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppLinkURL, Parameters.AppLinkURL);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppPageFormatId
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppPageFormatId, Parameters.AppPageFormatId);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppIsOpenInNewTab
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppIsOpenInNewTab, Parameters.AppIsOpenInNewTab);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppPageContent
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppPageContent, Parameters.AppPageContent);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppSEOWord
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppSEOWord, Parameters.AppSEOWord);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppSEODescription
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppSEODescription, Parameters.AppSEODescription);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppCreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppCreatedDate, Parameters.AppCreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppCreatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppCreatedBy, Parameters.AppCreatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppIsDefault
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppIsDefault, Parameters.AppIsDefault);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppDynamicParameters
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppDynamicParameters, Parameters.AppDynamicParameters);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter AppPageId
		    {
				get
		        {
					if(_AppPageId_W == null)
	        	    {
						_AppPageId_W = TearOff.AppPageId;
					}
					return _AppPageId_W;
				}
			}

			public AggregateParameter AppPageTitle
		    {
				get
		        {
					if(_AppPageTitle_W == null)
	        	    {
						_AppPageTitle_W = TearOff.AppPageTitle;
					}
					return _AppPageTitle_W;
				}
			}

			public AggregateParameter AppPageHeading
		    {
				get
		        {
					if(_AppPageHeading_W == null)
	        	    {
						_AppPageHeading_W = TearOff.AppPageHeading;
					}
					return _AppPageHeading_W;
				}
			}

			public AggregateParameter AppPageName
		    {
				get
		        {
					if(_AppPageName_W == null)
	        	    {
						_AppPageName_W = TearOff.AppPageName;
					}
					return _AppPageName_W;
				}
			}

			public AggregateParameter AppAlias
		    {
				get
		        {
					if(_AppAlias_W == null)
	        	    {
						_AppAlias_W = TearOff.AppAlias;
					}
					return _AppAlias_W;
				}
			}

			public AggregateParameter AppIsLink
		    {
				get
		        {
					if(_AppIsLink_W == null)
	        	    {
						_AppIsLink_W = TearOff.AppIsLink;
					}
					return _AppIsLink_W;
				}
			}

			public AggregateParameter AppLinkURL
		    {
				get
		        {
					if(_AppLinkURL_W == null)
	        	    {
						_AppLinkURL_W = TearOff.AppLinkURL;
					}
					return _AppLinkURL_W;
				}
			}

			public AggregateParameter AppPageFormatId
		    {
				get
		        {
					if(_AppPageFormatId_W == null)
	        	    {
						_AppPageFormatId_W = TearOff.AppPageFormatId;
					}
					return _AppPageFormatId_W;
				}
			}

			public AggregateParameter AppIsOpenInNewTab
		    {
				get
		        {
					if(_AppIsOpenInNewTab_W == null)
	        	    {
						_AppIsOpenInNewTab_W = TearOff.AppIsOpenInNewTab;
					}
					return _AppIsOpenInNewTab_W;
				}
			}

			public AggregateParameter AppPageContent
		    {
				get
		        {
					if(_AppPageContent_W == null)
	        	    {
						_AppPageContent_W = TearOff.AppPageContent;
					}
					return _AppPageContent_W;
				}
			}

			public AggregateParameter AppSEOWord
		    {
				get
		        {
					if(_AppSEOWord_W == null)
	        	    {
						_AppSEOWord_W = TearOff.AppSEOWord;
					}
					return _AppSEOWord_W;
				}
			}

			public AggregateParameter AppSEODescription
		    {
				get
		        {
					if(_AppSEODescription_W == null)
	        	    {
						_AppSEODescription_W = TearOff.AppSEODescription;
					}
					return _AppSEODescription_W;
				}
			}

			public AggregateParameter AppCreatedDate
		    {
				get
		        {
					if(_AppCreatedDate_W == null)
	        	    {
						_AppCreatedDate_W = TearOff.AppCreatedDate;
					}
					return _AppCreatedDate_W;
				}
			}

			public AggregateParameter AppCreatedBy
		    {
				get
		        {
					if(_AppCreatedBy_W == null)
	        	    {
						_AppCreatedBy_W = TearOff.AppCreatedBy;
					}
					return _AppCreatedBy_W;
				}
			}

			public AggregateParameter AppIsDefault
		    {
				get
		        {
					if(_AppIsDefault_W == null)
	        	    {
						_AppIsDefault_W = TearOff.AppIsDefault;
					}
					return _AppIsDefault_W;
				}
			}

			public AggregateParameter AppDynamicParameters
		    {
				get
		        {
					if(_AppDynamicParameters_W == null)
	        	    {
						_AppDynamicParameters_W = TearOff.AppDynamicParameters;
					}
					return _AppDynamicParameters_W;
				}
			}

			private AggregateParameter _AppPageId_W = null;
			private AggregateParameter _AppPageTitle_W = null;
			private AggregateParameter _AppPageHeading_W = null;
			private AggregateParameter _AppPageName_W = null;
			private AggregateParameter _AppAlias_W = null;
			private AggregateParameter _AppIsLink_W = null;
			private AggregateParameter _AppLinkURL_W = null;
			private AggregateParameter _AppPageFormatId_W = null;
			private AggregateParameter _AppIsOpenInNewTab_W = null;
			private AggregateParameter _AppPageContent_W = null;
			private AggregateParameter _AppSEOWord_W = null;
			private AggregateParameter _AppSEODescription_W = null;
			private AggregateParameter _AppCreatedDate_W = null;
			private AggregateParameter _AppCreatedBy_W = null;
			private AggregateParameter _AppIsDefault_W = null;
			private AggregateParameter _AppDynamicParameters_W = null;

			public void AggregateClauseReset()
			{
				_AppPageId_W = null;
				_AppPageTitle_W = null;
				_AppPageHeading_W = null;
				_AppPageName_W = null;
				_AppAlias_W = null;
				_AppIsLink_W = null;
				_AppLinkURL_W = null;
				_AppPageFormatId_W = null;
				_AppIsOpenInNewTab_W = null;
				_AppPageContent_W = null;
				_AppSEOWord_W = null;
				_AppSEODescription_W = null;
				_AppCreatedDate_W = null;
				_AppCreatedBy_W = null;
				_AppIsDefault_W = null;
				_AppDynamicParameters_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblPageInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.AppPageId.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblPageUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblPageDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.AppPageId);
			p.SourceColumn = ColumnNames.AppPageId;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.AppPageId);
			p.SourceColumn = ColumnNames.AppPageId;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppPageTitle);
			p.SourceColumn = ColumnNames.AppPageTitle;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppPageHeading);
			p.SourceColumn = ColumnNames.AppPageHeading;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppPageName);
			p.SourceColumn = ColumnNames.AppPageName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppAlias);
			p.SourceColumn = ColumnNames.AppAlias;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppIsLink);
			p.SourceColumn = ColumnNames.AppIsLink;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppLinkURL);
			p.SourceColumn = ColumnNames.AppLinkURL;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppPageFormatId);
			p.SourceColumn = ColumnNames.AppPageFormatId;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppIsOpenInNewTab);
			p.SourceColumn = ColumnNames.AppIsOpenInNewTab;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppPageContent);
			p.SourceColumn = ColumnNames.AppPageContent;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppSEOWord);
			p.SourceColumn = ColumnNames.AppSEOWord;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppSEODescription);
			p.SourceColumn = ColumnNames.AppSEODescription;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppCreatedDate);
			p.SourceColumn = ColumnNames.AppCreatedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppCreatedBy);
			p.SourceColumn = ColumnNames.AppCreatedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppIsDefault);
			p.SourceColumn = ColumnNames.AppIsDefault;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppDynamicParameters);
			p.SourceColumn = ColumnNames.AppDynamicParameters;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
