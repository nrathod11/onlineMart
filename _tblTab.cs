
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace BusinessLayer
{
	public abstract class _tblTab : SqlClientEntity
	{
		public _tblTab()
		{
			this.QuerySource = "tblTab";
			this.MappingName = "tblTab";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblTabLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int AppTabID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.AppTabID, AppTabID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblTabLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter AppTabID
			{
				get
				{
					return new SqlParameter("@AppTabID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AppTabName
			{
				get
				{
					return new SqlParameter("@AppTabName", SqlDbType.VarChar, 100);
				}
			}
			
			public static SqlParameter AppWebPageName
			{
				get
				{
					return new SqlParameter("@AppWebPageName", SqlDbType.VarChar, 100);
				}
			}
			
			public static SqlParameter AppParentID
			{
				get
				{
					return new SqlParameter("@AppParentID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AppIsMenu
			{
				get
				{
					return new SqlParameter("@AppIsMenu", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AppIsAdd
			{
				get
				{
					return new SqlParameter("@AppIsAdd", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AppIsEdit
			{
				get
				{
					return new SqlParameter("@AppIsEdit", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AppIsDelete
			{
				get
				{
					return new SqlParameter("@AppIsDelete", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AppIsActive
			{
				get
				{
					return new SqlParameter("@AppIsActive", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AppAddPage
			{
				get
				{
					return new SqlParameter("@AppAddPage", SqlDbType.VarChar, 100);
				}
			}
			
			public static SqlParameter AppDisplayOrder
			{
				get
				{
					return new SqlParameter("@AppDisplayOrder", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AppIsShowOnDashboard
			{
				get
				{
					return new SqlParameter("@AppIsShowOnDashboard", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AppIconPath
			{
				get
				{
					return new SqlParameter("@AppIconPath", SqlDbType.NVarChar, 150);
				}
			}
			
			public static SqlParameter AppCreatedDate
			{
				get
				{
					return new SqlParameter("@AppCreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter AppCreatedBy
			{
				get
				{
					return new SqlParameter("@AppCreatedBy", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string AppTabID = "appTabID";
            public const string AppTabName = "appTabName";
            public const string AppWebPageName = "appWebPageName";
            public const string AppParentID = "appParentID";
            public const string AppIsMenu = "appIsMenu";
            public const string AppIsAdd = "appIsAdd";
            public const string AppIsEdit = "appIsEdit";
            public const string AppIsDelete = "appIsDelete";
            public const string AppIsActive = "appIsActive";
            public const string AppAddPage = "appAddPage";
            public const string AppDisplayOrder = "appDisplayOrder";
            public const string AppIsShowOnDashboard = "appIsShowOnDashboard";
            public const string AppIconPath = "appIconPath";
            public const string AppCreatedDate = "appCreatedDate";
            public const string AppCreatedBy = "appCreatedBy";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[AppTabID] = _tblTab.PropertyNames.AppTabID;
					ht[AppTabName] = _tblTab.PropertyNames.AppTabName;
					ht[AppWebPageName] = _tblTab.PropertyNames.AppWebPageName;
					ht[AppParentID] = _tblTab.PropertyNames.AppParentID;
					ht[AppIsMenu] = _tblTab.PropertyNames.AppIsMenu;
					ht[AppIsAdd] = _tblTab.PropertyNames.AppIsAdd;
					ht[AppIsEdit] = _tblTab.PropertyNames.AppIsEdit;
					ht[AppIsDelete] = _tblTab.PropertyNames.AppIsDelete;
					ht[AppIsActive] = _tblTab.PropertyNames.AppIsActive;
					ht[AppAddPage] = _tblTab.PropertyNames.AppAddPage;
					ht[AppDisplayOrder] = _tblTab.PropertyNames.AppDisplayOrder;
					ht[AppIsShowOnDashboard] = _tblTab.PropertyNames.AppIsShowOnDashboard;
					ht[AppIconPath] = _tblTab.PropertyNames.AppIconPath;
					ht[AppCreatedDate] = _tblTab.PropertyNames.AppCreatedDate;
					ht[AppCreatedBy] = _tblTab.PropertyNames.AppCreatedBy;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string AppTabID = "AppTabID";
            public const string AppTabName = "AppTabName";
            public const string AppWebPageName = "AppWebPageName";
            public const string AppParentID = "AppParentID";
            public const string AppIsMenu = "AppIsMenu";
            public const string AppIsAdd = "AppIsAdd";
            public const string AppIsEdit = "AppIsEdit";
            public const string AppIsDelete = "AppIsDelete";
            public const string AppIsActive = "AppIsActive";
            public const string AppAddPage = "AppAddPage";
            public const string AppDisplayOrder = "AppDisplayOrder";
            public const string AppIsShowOnDashboard = "AppIsShowOnDashboard";
            public const string AppIconPath = "AppIconPath";
            public const string AppCreatedDate = "AppCreatedDate";
            public const string AppCreatedBy = "AppCreatedBy";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[AppTabID] = _tblTab.ColumnNames.AppTabID;
					ht[AppTabName] = _tblTab.ColumnNames.AppTabName;
					ht[AppWebPageName] = _tblTab.ColumnNames.AppWebPageName;
					ht[AppParentID] = _tblTab.ColumnNames.AppParentID;
					ht[AppIsMenu] = _tblTab.ColumnNames.AppIsMenu;
					ht[AppIsAdd] = _tblTab.ColumnNames.AppIsAdd;
					ht[AppIsEdit] = _tblTab.ColumnNames.AppIsEdit;
					ht[AppIsDelete] = _tblTab.ColumnNames.AppIsDelete;
					ht[AppIsActive] = _tblTab.ColumnNames.AppIsActive;
					ht[AppAddPage] = _tblTab.ColumnNames.AppAddPage;
					ht[AppDisplayOrder] = _tblTab.ColumnNames.AppDisplayOrder;
					ht[AppIsShowOnDashboard] = _tblTab.ColumnNames.AppIsShowOnDashboard;
					ht[AppIconPath] = _tblTab.ColumnNames.AppIconPath;
					ht[AppCreatedDate] = _tblTab.ColumnNames.AppCreatedDate;
					ht[AppCreatedBy] = _tblTab.ColumnNames.AppCreatedBy;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string AppTabID = "s_AppTabID";
            public const string AppTabName = "s_AppTabName";
            public const string AppWebPageName = "s_AppWebPageName";
            public const string AppParentID = "s_AppParentID";
            public const string AppIsMenu = "s_AppIsMenu";
            public const string AppIsAdd = "s_AppIsAdd";
            public const string AppIsEdit = "s_AppIsEdit";
            public const string AppIsDelete = "s_AppIsDelete";
            public const string AppIsActive = "s_AppIsActive";
            public const string AppAddPage = "s_AppAddPage";
            public const string AppDisplayOrder = "s_AppDisplayOrder";
            public const string AppIsShowOnDashboard = "s_AppIsShowOnDashboard";
            public const string AppIconPath = "s_AppIconPath";
            public const string AppCreatedDate = "s_AppCreatedDate";
            public const string AppCreatedBy = "s_AppCreatedBy";

		}
		#endregion		
		
		#region Properties
	
		public virtual int AppTabID
	    {
			get
	        {
				return base.Getint(ColumnNames.AppTabID);
			}
			set
	        {
				base.Setint(ColumnNames.AppTabID, value);
			}
		}

		public virtual string AppTabName
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppTabName);
			}
			set
	        {
				base.Setstring(ColumnNames.AppTabName, value);
			}
		}

		public virtual string AppWebPageName
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppWebPageName);
			}
			set
	        {
				base.Setstring(ColumnNames.AppWebPageName, value);
			}
		}

		public virtual int AppParentID
	    {
			get
	        {
				return base.Getint(ColumnNames.AppParentID);
			}
			set
	        {
				base.Setint(ColumnNames.AppParentID, value);
			}
		}

		public virtual bool AppIsMenu
	    {
			get
	        {
				return base.Getbool(ColumnNames.AppIsMenu);
			}
			set
	        {
				base.Setbool(ColumnNames.AppIsMenu, value);
			}
		}

		public virtual bool AppIsAdd
	    {
			get
	        {
				return base.Getbool(ColumnNames.AppIsAdd);
			}
			set
	        {
				base.Setbool(ColumnNames.AppIsAdd, value);
			}
		}

		public virtual bool AppIsEdit
	    {
			get
	        {
				return base.Getbool(ColumnNames.AppIsEdit);
			}
			set
	        {
				base.Setbool(ColumnNames.AppIsEdit, value);
			}
		}

		public virtual bool AppIsDelete
	    {
			get
	        {
				return base.Getbool(ColumnNames.AppIsDelete);
			}
			set
	        {
				base.Setbool(ColumnNames.AppIsDelete, value);
			}
		}

		public virtual bool AppIsActive
	    {
			get
	        {
				return base.Getbool(ColumnNames.AppIsActive);
			}
			set
	        {
				base.Setbool(ColumnNames.AppIsActive, value);
			}
		}

		public virtual string AppAddPage
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppAddPage);
			}
			set
	        {
				base.Setstring(ColumnNames.AppAddPage, value);
			}
		}

		public virtual int AppDisplayOrder
	    {
			get
	        {
				return base.Getint(ColumnNames.AppDisplayOrder);
			}
			set
	        {
				base.Setint(ColumnNames.AppDisplayOrder, value);
			}
		}

		public virtual bool AppIsShowOnDashboard
	    {
			get
	        {
				return base.Getbool(ColumnNames.AppIsShowOnDashboard);
			}
			set
	        {
				base.Setbool(ColumnNames.AppIsShowOnDashboard, value);
			}
		}

		public virtual string AppIconPath
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppIconPath);
			}
			set
	        {
				base.Setstring(ColumnNames.AppIconPath, value);
			}
		}

		public virtual DateTime AppCreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.AppCreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.AppCreatedDate, value);
			}
		}

		public virtual int AppCreatedBy
	    {
			get
	        {
				return base.Getint(ColumnNames.AppCreatedBy);
			}
			set
	        {
				base.Setint(ColumnNames.AppCreatedBy, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_AppTabID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppTabID) ? string.Empty : base.GetintAsString(ColumnNames.AppTabID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppTabID);
				else
					this.AppTabID = base.SetintAsString(ColumnNames.AppTabID, value);
			}
		}

		public virtual string s_AppTabName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppTabName) ? string.Empty : base.GetstringAsString(ColumnNames.AppTabName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppTabName);
				else
					this.AppTabName = base.SetstringAsString(ColumnNames.AppTabName, value);
			}
		}

		public virtual string s_AppWebPageName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppWebPageName) ? string.Empty : base.GetstringAsString(ColumnNames.AppWebPageName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppWebPageName);
				else
					this.AppWebPageName = base.SetstringAsString(ColumnNames.AppWebPageName, value);
			}
		}

		public virtual string s_AppParentID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppParentID) ? string.Empty : base.GetintAsString(ColumnNames.AppParentID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppParentID);
				else
					this.AppParentID = base.SetintAsString(ColumnNames.AppParentID, value);
			}
		}

		public virtual string s_AppIsMenu
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppIsMenu) ? string.Empty : base.GetboolAsString(ColumnNames.AppIsMenu);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppIsMenu);
				else
					this.AppIsMenu = base.SetboolAsString(ColumnNames.AppIsMenu, value);
			}
		}

		public virtual string s_AppIsAdd
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppIsAdd) ? string.Empty : base.GetboolAsString(ColumnNames.AppIsAdd);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppIsAdd);
				else
					this.AppIsAdd = base.SetboolAsString(ColumnNames.AppIsAdd, value);
			}
		}

		public virtual string s_AppIsEdit
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppIsEdit) ? string.Empty : base.GetboolAsString(ColumnNames.AppIsEdit);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppIsEdit);
				else
					this.AppIsEdit = base.SetboolAsString(ColumnNames.AppIsEdit, value);
			}
		}

		public virtual string s_AppIsDelete
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppIsDelete) ? string.Empty : base.GetboolAsString(ColumnNames.AppIsDelete);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppIsDelete);
				else
					this.AppIsDelete = base.SetboolAsString(ColumnNames.AppIsDelete, value);
			}
		}

		public virtual string s_AppIsActive
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppIsActive) ? string.Empty : base.GetboolAsString(ColumnNames.AppIsActive);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppIsActive);
				else
					this.AppIsActive = base.SetboolAsString(ColumnNames.AppIsActive, value);
			}
		}

		public virtual string s_AppAddPage
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppAddPage) ? string.Empty : base.GetstringAsString(ColumnNames.AppAddPage);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppAddPage);
				else
					this.AppAddPage = base.SetstringAsString(ColumnNames.AppAddPage, value);
			}
		}

		public virtual string s_AppDisplayOrder
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppDisplayOrder) ? string.Empty : base.GetintAsString(ColumnNames.AppDisplayOrder);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppDisplayOrder);
				else
					this.AppDisplayOrder = base.SetintAsString(ColumnNames.AppDisplayOrder, value);
			}
		}

		public virtual string s_AppIsShowOnDashboard
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppIsShowOnDashboard) ? string.Empty : base.GetboolAsString(ColumnNames.AppIsShowOnDashboard);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppIsShowOnDashboard);
				else
					this.AppIsShowOnDashboard = base.SetboolAsString(ColumnNames.AppIsShowOnDashboard, value);
			}
		}

		public virtual string s_AppIconPath
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppIconPath) ? string.Empty : base.GetstringAsString(ColumnNames.AppIconPath);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppIconPath);
				else
					this.AppIconPath = base.SetstringAsString(ColumnNames.AppIconPath, value);
			}
		}

		public virtual string s_AppCreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppCreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.AppCreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppCreatedDate);
				else
					this.AppCreatedDate = base.SetDateTimeAsString(ColumnNames.AppCreatedDate, value);
			}
		}

		public virtual string s_AppCreatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppCreatedBy) ? string.Empty : base.GetintAsString(ColumnNames.AppCreatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppCreatedBy);
				else
					this.AppCreatedBy = base.SetintAsString(ColumnNames.AppCreatedBy, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter AppTabID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppTabID, Parameters.AppTabID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppTabName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppTabName, Parameters.AppTabName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppWebPageName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppWebPageName, Parameters.AppWebPageName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppParentID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppParentID, Parameters.AppParentID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppIsMenu
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppIsMenu, Parameters.AppIsMenu);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppIsAdd
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppIsAdd, Parameters.AppIsAdd);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppIsEdit
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppIsEdit, Parameters.AppIsEdit);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppIsDelete
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppIsDelete, Parameters.AppIsDelete);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppIsActive
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppIsActive, Parameters.AppIsActive);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppAddPage
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppAddPage, Parameters.AppAddPage);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppDisplayOrder
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppDisplayOrder, Parameters.AppDisplayOrder);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppIsShowOnDashboard
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppIsShowOnDashboard, Parameters.AppIsShowOnDashboard);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppIconPath
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppIconPath, Parameters.AppIconPath);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppCreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppCreatedDate, Parameters.AppCreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppCreatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppCreatedBy, Parameters.AppCreatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter AppTabID
		    {
				get
		        {
					if(_AppTabID_W == null)
	        	    {
						_AppTabID_W = TearOff.AppTabID;
					}
					return _AppTabID_W;
				}
			}

			public WhereParameter AppTabName
		    {
				get
		        {
					if(_AppTabName_W == null)
	        	    {
						_AppTabName_W = TearOff.AppTabName;
					}
					return _AppTabName_W;
				}
			}

			public WhereParameter AppWebPageName
		    {
				get
		        {
					if(_AppWebPageName_W == null)
	        	    {
						_AppWebPageName_W = TearOff.AppWebPageName;
					}
					return _AppWebPageName_W;
				}
			}

			public WhereParameter AppParentID
		    {
				get
		        {
					if(_AppParentID_W == null)
	        	    {
						_AppParentID_W = TearOff.AppParentID;
					}
					return _AppParentID_W;
				}
			}

			public WhereParameter AppIsMenu
		    {
				get
		        {
					if(_AppIsMenu_W == null)
	        	    {
						_AppIsMenu_W = TearOff.AppIsMenu;
					}
					return _AppIsMenu_W;
				}
			}

			public WhereParameter AppIsAdd
		    {
				get
		        {
					if(_AppIsAdd_W == null)
	        	    {
						_AppIsAdd_W = TearOff.AppIsAdd;
					}
					return _AppIsAdd_W;
				}
			}

			public WhereParameter AppIsEdit
		    {
				get
		        {
					if(_AppIsEdit_W == null)
	        	    {
						_AppIsEdit_W = TearOff.AppIsEdit;
					}
					return _AppIsEdit_W;
				}
			}

			public WhereParameter AppIsDelete
		    {
				get
		        {
					if(_AppIsDelete_W == null)
	        	    {
						_AppIsDelete_W = TearOff.AppIsDelete;
					}
					return _AppIsDelete_W;
				}
			}

			public WhereParameter AppIsActive
		    {
				get
		        {
					if(_AppIsActive_W == null)
	        	    {
						_AppIsActive_W = TearOff.AppIsActive;
					}
					return _AppIsActive_W;
				}
			}

			public WhereParameter AppAddPage
		    {
				get
		        {
					if(_AppAddPage_W == null)
	        	    {
						_AppAddPage_W = TearOff.AppAddPage;
					}
					return _AppAddPage_W;
				}
			}

			public WhereParameter AppDisplayOrder
		    {
				get
		        {
					if(_AppDisplayOrder_W == null)
	        	    {
						_AppDisplayOrder_W = TearOff.AppDisplayOrder;
					}
					return _AppDisplayOrder_W;
				}
			}

			public WhereParameter AppIsShowOnDashboard
		    {
				get
		        {
					if(_AppIsShowOnDashboard_W == null)
	        	    {
						_AppIsShowOnDashboard_W = TearOff.AppIsShowOnDashboard;
					}
					return _AppIsShowOnDashboard_W;
				}
			}

			public WhereParameter AppIconPath
		    {
				get
		        {
					if(_AppIconPath_W == null)
	        	    {
						_AppIconPath_W = TearOff.AppIconPath;
					}
					return _AppIconPath_W;
				}
			}

			public WhereParameter AppCreatedDate
		    {
				get
		        {
					if(_AppCreatedDate_W == null)
	        	    {
						_AppCreatedDate_W = TearOff.AppCreatedDate;
					}
					return _AppCreatedDate_W;
				}
			}

			public WhereParameter AppCreatedBy
		    {
				get
		        {
					if(_AppCreatedBy_W == null)
	        	    {
						_AppCreatedBy_W = TearOff.AppCreatedBy;
					}
					return _AppCreatedBy_W;
				}
			}

			private WhereParameter _AppTabID_W = null;
			private WhereParameter _AppTabName_W = null;
			private WhereParameter _AppWebPageName_W = null;
			private WhereParameter _AppParentID_W = null;
			private WhereParameter _AppIsMenu_W = null;
			private WhereParameter _AppIsAdd_W = null;
			private WhereParameter _AppIsEdit_W = null;
			private WhereParameter _AppIsDelete_W = null;
			private WhereParameter _AppIsActive_W = null;
			private WhereParameter _AppAddPage_W = null;
			private WhereParameter _AppDisplayOrder_W = null;
			private WhereParameter _AppIsShowOnDashboard_W = null;
			private WhereParameter _AppIconPath_W = null;
			private WhereParameter _AppCreatedDate_W = null;
			private WhereParameter _AppCreatedBy_W = null;

			public void WhereClauseReset()
			{
				_AppTabID_W = null;
				_AppTabName_W = null;
				_AppWebPageName_W = null;
				_AppParentID_W = null;
				_AppIsMenu_W = null;
				_AppIsAdd_W = null;
				_AppIsEdit_W = null;
				_AppIsDelete_W = null;
				_AppIsActive_W = null;
				_AppAddPage_W = null;
				_AppDisplayOrder_W = null;
				_AppIsShowOnDashboard_W = null;
				_AppIconPath_W = null;
				_AppCreatedDate_W = null;
				_AppCreatedBy_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter AppTabID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppTabID, Parameters.AppTabID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppTabName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppTabName, Parameters.AppTabName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppWebPageName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppWebPageName, Parameters.AppWebPageName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppParentID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppParentID, Parameters.AppParentID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppIsMenu
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppIsMenu, Parameters.AppIsMenu);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppIsAdd
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppIsAdd, Parameters.AppIsAdd);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppIsEdit
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppIsEdit, Parameters.AppIsEdit);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppIsDelete
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppIsDelete, Parameters.AppIsDelete);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppIsActive
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppIsActive, Parameters.AppIsActive);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppAddPage
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppAddPage, Parameters.AppAddPage);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppDisplayOrder
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppDisplayOrder, Parameters.AppDisplayOrder);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppIsShowOnDashboard
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppIsShowOnDashboard, Parameters.AppIsShowOnDashboard);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppIconPath
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppIconPath, Parameters.AppIconPath);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppCreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppCreatedDate, Parameters.AppCreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppCreatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppCreatedBy, Parameters.AppCreatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter AppTabID
		    {
				get
		        {
					if(_AppTabID_W == null)
	        	    {
						_AppTabID_W = TearOff.AppTabID;
					}
					return _AppTabID_W;
				}
			}

			public AggregateParameter AppTabName
		    {
				get
		        {
					if(_AppTabName_W == null)
	        	    {
						_AppTabName_W = TearOff.AppTabName;
					}
					return _AppTabName_W;
				}
			}

			public AggregateParameter AppWebPageName
		    {
				get
		        {
					if(_AppWebPageName_W == null)
	        	    {
						_AppWebPageName_W = TearOff.AppWebPageName;
					}
					return _AppWebPageName_W;
				}
			}

			public AggregateParameter AppParentID
		    {
				get
		        {
					if(_AppParentID_W == null)
	        	    {
						_AppParentID_W = TearOff.AppParentID;
					}
					return _AppParentID_W;
				}
			}

			public AggregateParameter AppIsMenu
		    {
				get
		        {
					if(_AppIsMenu_W == null)
	        	    {
						_AppIsMenu_W = TearOff.AppIsMenu;
					}
					return _AppIsMenu_W;
				}
			}

			public AggregateParameter AppIsAdd
		    {
				get
		        {
					if(_AppIsAdd_W == null)
	        	    {
						_AppIsAdd_W = TearOff.AppIsAdd;
					}
					return _AppIsAdd_W;
				}
			}

			public AggregateParameter AppIsEdit
		    {
				get
		        {
					if(_AppIsEdit_W == null)
	        	    {
						_AppIsEdit_W = TearOff.AppIsEdit;
					}
					return _AppIsEdit_W;
				}
			}

			public AggregateParameter AppIsDelete
		    {
				get
		        {
					if(_AppIsDelete_W == null)
	        	    {
						_AppIsDelete_W = TearOff.AppIsDelete;
					}
					return _AppIsDelete_W;
				}
			}

			public AggregateParameter AppIsActive
		    {
				get
		        {
					if(_AppIsActive_W == null)
	        	    {
						_AppIsActive_W = TearOff.AppIsActive;
					}
					return _AppIsActive_W;
				}
			}

			public AggregateParameter AppAddPage
		    {
				get
		        {
					if(_AppAddPage_W == null)
	        	    {
						_AppAddPage_W = TearOff.AppAddPage;
					}
					return _AppAddPage_W;
				}
			}

			public AggregateParameter AppDisplayOrder
		    {
				get
		        {
					if(_AppDisplayOrder_W == null)
	        	    {
						_AppDisplayOrder_W = TearOff.AppDisplayOrder;
					}
					return _AppDisplayOrder_W;
				}
			}

			public AggregateParameter AppIsShowOnDashboard
		    {
				get
		        {
					if(_AppIsShowOnDashboard_W == null)
	        	    {
						_AppIsShowOnDashboard_W = TearOff.AppIsShowOnDashboard;
					}
					return _AppIsShowOnDashboard_W;
				}
			}

			public AggregateParameter AppIconPath
		    {
				get
		        {
					if(_AppIconPath_W == null)
	        	    {
						_AppIconPath_W = TearOff.AppIconPath;
					}
					return _AppIconPath_W;
				}
			}

			public AggregateParameter AppCreatedDate
		    {
				get
		        {
					if(_AppCreatedDate_W == null)
	        	    {
						_AppCreatedDate_W = TearOff.AppCreatedDate;
					}
					return _AppCreatedDate_W;
				}
			}

			public AggregateParameter AppCreatedBy
		    {
				get
		        {
					if(_AppCreatedBy_W == null)
	        	    {
						_AppCreatedBy_W = TearOff.AppCreatedBy;
					}
					return _AppCreatedBy_W;
				}
			}

			private AggregateParameter _AppTabID_W = null;
			private AggregateParameter _AppTabName_W = null;
			private AggregateParameter _AppWebPageName_W = null;
			private AggregateParameter _AppParentID_W = null;
			private AggregateParameter _AppIsMenu_W = null;
			private AggregateParameter _AppIsAdd_W = null;
			private AggregateParameter _AppIsEdit_W = null;
			private AggregateParameter _AppIsDelete_W = null;
			private AggregateParameter _AppIsActive_W = null;
			private AggregateParameter _AppAddPage_W = null;
			private AggregateParameter _AppDisplayOrder_W = null;
			private AggregateParameter _AppIsShowOnDashboard_W = null;
			private AggregateParameter _AppIconPath_W = null;
			private AggregateParameter _AppCreatedDate_W = null;
			private AggregateParameter _AppCreatedBy_W = null;

			public void AggregateClauseReset()
			{
				_AppTabID_W = null;
				_AppTabName_W = null;
				_AppWebPageName_W = null;
				_AppParentID_W = null;
				_AppIsMenu_W = null;
				_AppIsAdd_W = null;
				_AppIsEdit_W = null;
				_AppIsDelete_W = null;
				_AppIsActive_W = null;
				_AppAddPage_W = null;
				_AppDisplayOrder_W = null;
				_AppIsShowOnDashboard_W = null;
				_AppIconPath_W = null;
				_AppCreatedDate_W = null;
				_AppCreatedBy_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblTabInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.AppTabID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblTabUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblTabDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.AppTabID);
			p.SourceColumn = ColumnNames.AppTabID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.AppTabID);
			p.SourceColumn = ColumnNames.AppTabID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppTabName);
			p.SourceColumn = ColumnNames.AppTabName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppWebPageName);
			p.SourceColumn = ColumnNames.AppWebPageName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppParentID);
			p.SourceColumn = ColumnNames.AppParentID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppIsMenu);
			p.SourceColumn = ColumnNames.AppIsMenu;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppIsAdd);
			p.SourceColumn = ColumnNames.AppIsAdd;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppIsEdit);
			p.SourceColumn = ColumnNames.AppIsEdit;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppIsDelete);
			p.SourceColumn = ColumnNames.AppIsDelete;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppIsActive);
			p.SourceColumn = ColumnNames.AppIsActive;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppAddPage);
			p.SourceColumn = ColumnNames.AppAddPage;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppDisplayOrder);
			p.SourceColumn = ColumnNames.AppDisplayOrder;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppIsShowOnDashboard);
			p.SourceColumn = ColumnNames.AppIsShowOnDashboard;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppIconPath);
			p.SourceColumn = ColumnNames.AppIconPath;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppCreatedDate);
			p.SourceColumn = ColumnNames.AppCreatedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppCreatedBy);
			p.SourceColumn = ColumnNames.AppCreatedBy;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
