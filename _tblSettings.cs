
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace BusinessLayer
{
	public abstract class _tblSettings : SqlClientEntity
	{
		public _tblSettings()
		{
			this.QuerySource = "tblSettings";
			this.MappingName = "tblSettings";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblSettingsLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int AppSettingsId)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.AppSettingsId, AppSettingsId);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblSettingsLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter AppSettingsId
			{
				get
				{
					return new SqlParameter("@AppSettingsId", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AppSiteName
			{
				get
				{
					return new SqlParameter("@AppSiteName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter AppSiteTitle
			{
				get
				{
					return new SqlParameter("@AppSiteTitle", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter AppClientSiteURL
			{
				get
				{
					return new SqlParameter("@AppClientSiteURL", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter AppFooterText
			{
				get
				{
					return new SqlParameter("@AppFooterText", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter AppIsSiteOffline
			{
				get
				{
					return new SqlParameter("@AppIsSiteOffline", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AppSiteOfflineMessage
			{
				get
				{
					return new SqlParameter("@AppSiteOfflineMessage", SqlDbType.Text, 2147483647);
				}
			}
			
			public static SqlParameter AppSiteOfflineImage
			{
				get
				{
					return new SqlParameter("@AppSiteOfflineImage", SqlDbType.Text, 2147483647);
				}
			}
			
			public static SqlParameter AppSiteLogo
			{
				get
				{
					return new SqlParameter("@AppSiteLogo", SqlDbType.Text, 2147483647);
				}
			}
			
			public static SqlParameter AppSiteFavicon
			{
				get
				{
					return new SqlParameter("@AppSiteFavicon", SqlDbType.Text, 2147483647);
				}
			}
			
			public static SqlParameter AppSiteTagLine
			{
				get
				{
					return new SqlParameter("@AppSiteTagLine", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter AppSiteDefaultListLimit
			{
				get
				{
					return new SqlParameter("@AppSiteDefaultListLimit", SqlDbType.NVarChar, 10);
				}
			}
			
			public static SqlParameter AppPathToFolder
			{
				get
				{
					return new SqlParameter("@AppPathToFolder", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter AppDatasource
			{
				get
				{
					return new SqlParameter("@AppDatasource", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter AppDatasourceUserName
			{
				get
				{
					return new SqlParameter("@AppDatasourceUserName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter AppDatasourcePassword
			{
				get
				{
					return new SqlParameter("@AppDatasourcePassword", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter AppIsUseIntegratedSecurity
			{
				get
				{
					return new SqlParameter("@AppIsUseIntegratedSecurity", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AppDatabaseName
			{
				get
				{
					return new SqlParameter("@AppDatabaseName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter AppSiteEmail
			{
				get
				{
					return new SqlParameter("@AppSiteEmail", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter AppRecepientEmail
			{
				get
				{
					return new SqlParameter("@AppRecepientEmail", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter AppSMTP
			{
				get
				{
					return new SqlParameter("@AppSMTP", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter AppEmailPassword
			{
				get
				{
					return new SqlParameter("@AppEmailPassword", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter AppPortNumber
			{
				get
				{
					return new SqlParameter("@AppPortNumber", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter AppCreatedBy
			{
				get
				{
					return new SqlParameter("@AppCreatedBy", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AppCreatedDate
			{
				get
				{
					return new SqlParameter("@AppCreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter AppIsCOD
			{
				get
				{
					return new SqlParameter("@AppIsCOD", SqlDbType.Bit, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string AppSettingsId = "appSettingsId";
            public const string AppSiteName = "appSiteName";
            public const string AppSiteTitle = "appSiteTitle";
            public const string AppClientSiteURL = "appClientSiteURL";
            public const string AppFooterText = "appFooterText";
            public const string AppIsSiteOffline = "appIsSiteOffline";
            public const string AppSiteOfflineMessage = "appSiteOfflineMessage";
            public const string AppSiteOfflineImage = "appSiteOfflineImage";
            public const string AppSiteLogo = "appSiteLogo";
            public const string AppSiteFavicon = "appSiteFavicon";
            public const string AppSiteTagLine = "appSiteTagLine";
            public const string AppSiteDefaultListLimit = "appSiteDefaultListLimit";
            public const string AppPathToFolder = "appPathToFolder";
            public const string AppDatasource = "appDatasource";
            public const string AppDatasourceUserName = "appDatasourceUserName";
            public const string AppDatasourcePassword = "appDatasourcePassword";
            public const string AppIsUseIntegratedSecurity = "appIsUseIntegratedSecurity";
            public const string AppDatabaseName = "appDatabaseName";
            public const string AppSiteEmail = "appSiteEmail";
            public const string AppRecepientEmail = "appRecepientEmail";
            public const string AppSMTP = "appSMTP";
            public const string AppEmailPassword = "appEmailPassword";
            public const string AppPortNumber = "appPortNumber";
            public const string AppCreatedBy = "appCreatedBy";
            public const string AppCreatedDate = "appCreatedDate";
            public const string AppIsCOD = "appIsCOD";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[AppSettingsId] = _tblSettings.PropertyNames.AppSettingsId;
					ht[AppSiteName] = _tblSettings.PropertyNames.AppSiteName;
					ht[AppSiteTitle] = _tblSettings.PropertyNames.AppSiteTitle;
					ht[AppClientSiteURL] = _tblSettings.PropertyNames.AppClientSiteURL;
					ht[AppFooterText] = _tblSettings.PropertyNames.AppFooterText;
					ht[AppIsSiteOffline] = _tblSettings.PropertyNames.AppIsSiteOffline;
					ht[AppSiteOfflineMessage] = _tblSettings.PropertyNames.AppSiteOfflineMessage;
					ht[AppSiteOfflineImage] = _tblSettings.PropertyNames.AppSiteOfflineImage;
					ht[AppSiteLogo] = _tblSettings.PropertyNames.AppSiteLogo;
					ht[AppSiteFavicon] = _tblSettings.PropertyNames.AppSiteFavicon;
					ht[AppSiteTagLine] = _tblSettings.PropertyNames.AppSiteTagLine;
					ht[AppSiteDefaultListLimit] = _tblSettings.PropertyNames.AppSiteDefaultListLimit;
					ht[AppPathToFolder] = _tblSettings.PropertyNames.AppPathToFolder;
					ht[AppDatasource] = _tblSettings.PropertyNames.AppDatasource;
					ht[AppDatasourceUserName] = _tblSettings.PropertyNames.AppDatasourceUserName;
					ht[AppDatasourcePassword] = _tblSettings.PropertyNames.AppDatasourcePassword;
					ht[AppIsUseIntegratedSecurity] = _tblSettings.PropertyNames.AppIsUseIntegratedSecurity;
					ht[AppDatabaseName] = _tblSettings.PropertyNames.AppDatabaseName;
					ht[AppSiteEmail] = _tblSettings.PropertyNames.AppSiteEmail;
					ht[AppRecepientEmail] = _tblSettings.PropertyNames.AppRecepientEmail;
					ht[AppSMTP] = _tblSettings.PropertyNames.AppSMTP;
					ht[AppEmailPassword] = _tblSettings.PropertyNames.AppEmailPassword;
					ht[AppPortNumber] = _tblSettings.PropertyNames.AppPortNumber;
					ht[AppCreatedBy] = _tblSettings.PropertyNames.AppCreatedBy;
					ht[AppCreatedDate] = _tblSettings.PropertyNames.AppCreatedDate;
					ht[AppIsCOD] = _tblSettings.PropertyNames.AppIsCOD;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string AppSettingsId = "AppSettingsId";
            public const string AppSiteName = "AppSiteName";
            public const string AppSiteTitle = "AppSiteTitle";
            public const string AppClientSiteURL = "AppClientSiteURL";
            public const string AppFooterText = "AppFooterText";
            public const string AppIsSiteOffline = "AppIsSiteOffline";
            public const string AppSiteOfflineMessage = "AppSiteOfflineMessage";
            public const string AppSiteOfflineImage = "AppSiteOfflineImage";
            public const string AppSiteLogo = "AppSiteLogo";
            public const string AppSiteFavicon = "AppSiteFavicon";
            public const string AppSiteTagLine = "AppSiteTagLine";
            public const string AppSiteDefaultListLimit = "AppSiteDefaultListLimit";
            public const string AppPathToFolder = "AppPathToFolder";
            public const string AppDatasource = "AppDatasource";
            public const string AppDatasourceUserName = "AppDatasourceUserName";
            public const string AppDatasourcePassword = "AppDatasourcePassword";
            public const string AppIsUseIntegratedSecurity = "AppIsUseIntegratedSecurity";
            public const string AppDatabaseName = "AppDatabaseName";
            public const string AppSiteEmail = "AppSiteEmail";
            public const string AppRecepientEmail = "AppRecepientEmail";
            public const string AppSMTP = "AppSMTP";
            public const string AppEmailPassword = "AppEmailPassword";
            public const string AppPortNumber = "AppPortNumber";
            public const string AppCreatedBy = "AppCreatedBy";
            public const string AppCreatedDate = "AppCreatedDate";
            public const string AppIsCOD = "AppIsCOD";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[AppSettingsId] = _tblSettings.ColumnNames.AppSettingsId;
					ht[AppSiteName] = _tblSettings.ColumnNames.AppSiteName;
					ht[AppSiteTitle] = _tblSettings.ColumnNames.AppSiteTitle;
					ht[AppClientSiteURL] = _tblSettings.ColumnNames.AppClientSiteURL;
					ht[AppFooterText] = _tblSettings.ColumnNames.AppFooterText;
					ht[AppIsSiteOffline] = _tblSettings.ColumnNames.AppIsSiteOffline;
					ht[AppSiteOfflineMessage] = _tblSettings.ColumnNames.AppSiteOfflineMessage;
					ht[AppSiteOfflineImage] = _tblSettings.ColumnNames.AppSiteOfflineImage;
					ht[AppSiteLogo] = _tblSettings.ColumnNames.AppSiteLogo;
					ht[AppSiteFavicon] = _tblSettings.ColumnNames.AppSiteFavicon;
					ht[AppSiteTagLine] = _tblSettings.ColumnNames.AppSiteTagLine;
					ht[AppSiteDefaultListLimit] = _tblSettings.ColumnNames.AppSiteDefaultListLimit;
					ht[AppPathToFolder] = _tblSettings.ColumnNames.AppPathToFolder;
					ht[AppDatasource] = _tblSettings.ColumnNames.AppDatasource;
					ht[AppDatasourceUserName] = _tblSettings.ColumnNames.AppDatasourceUserName;
					ht[AppDatasourcePassword] = _tblSettings.ColumnNames.AppDatasourcePassword;
					ht[AppIsUseIntegratedSecurity] = _tblSettings.ColumnNames.AppIsUseIntegratedSecurity;
					ht[AppDatabaseName] = _tblSettings.ColumnNames.AppDatabaseName;
					ht[AppSiteEmail] = _tblSettings.ColumnNames.AppSiteEmail;
					ht[AppRecepientEmail] = _tblSettings.ColumnNames.AppRecepientEmail;
					ht[AppSMTP] = _tblSettings.ColumnNames.AppSMTP;
					ht[AppEmailPassword] = _tblSettings.ColumnNames.AppEmailPassword;
					ht[AppPortNumber] = _tblSettings.ColumnNames.AppPortNumber;
					ht[AppCreatedBy] = _tblSettings.ColumnNames.AppCreatedBy;
					ht[AppCreatedDate] = _tblSettings.ColumnNames.AppCreatedDate;
					ht[AppIsCOD] = _tblSettings.ColumnNames.AppIsCOD;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string AppSettingsId = "s_AppSettingsId";
            public const string AppSiteName = "s_AppSiteName";
            public const string AppSiteTitle = "s_AppSiteTitle";
            public const string AppClientSiteURL = "s_AppClientSiteURL";
            public const string AppFooterText = "s_AppFooterText";
            public const string AppIsSiteOffline = "s_AppIsSiteOffline";
            public const string AppSiteOfflineMessage = "s_AppSiteOfflineMessage";
            public const string AppSiteOfflineImage = "s_AppSiteOfflineImage";
            public const string AppSiteLogo = "s_AppSiteLogo";
            public const string AppSiteFavicon = "s_AppSiteFavicon";
            public const string AppSiteTagLine = "s_AppSiteTagLine";
            public const string AppSiteDefaultListLimit = "s_AppSiteDefaultListLimit";
            public const string AppPathToFolder = "s_AppPathToFolder";
            public const string AppDatasource = "s_AppDatasource";
            public const string AppDatasourceUserName = "s_AppDatasourceUserName";
            public const string AppDatasourcePassword = "s_AppDatasourcePassword";
            public const string AppIsUseIntegratedSecurity = "s_AppIsUseIntegratedSecurity";
            public const string AppDatabaseName = "s_AppDatabaseName";
            public const string AppSiteEmail = "s_AppSiteEmail";
            public const string AppRecepientEmail = "s_AppRecepientEmail";
            public const string AppSMTP = "s_AppSMTP";
            public const string AppEmailPassword = "s_AppEmailPassword";
            public const string AppPortNumber = "s_AppPortNumber";
            public const string AppCreatedBy = "s_AppCreatedBy";
            public const string AppCreatedDate = "s_AppCreatedDate";
            public const string AppIsCOD = "s_AppIsCOD";

		}
		#endregion		
		
		#region Properties
	
		public virtual int AppSettingsId
	    {
			get
	        {
				return base.Getint(ColumnNames.AppSettingsId);
			}
			set
	        {
				base.Setint(ColumnNames.AppSettingsId, value);
			}
		}

		public virtual string AppSiteName
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppSiteName);
			}
			set
	        {
				base.Setstring(ColumnNames.AppSiteName, value);
			}
		}

		public virtual string AppSiteTitle
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppSiteTitle);
			}
			set
	        {
				base.Setstring(ColumnNames.AppSiteTitle, value);
			}
		}

		public virtual string AppClientSiteURL
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppClientSiteURL);
			}
			set
	        {
				base.Setstring(ColumnNames.AppClientSiteURL, value);
			}
		}

		public virtual string AppFooterText
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppFooterText);
			}
			set
	        {
				base.Setstring(ColumnNames.AppFooterText, value);
			}
		}

		public virtual bool AppIsSiteOffline
	    {
			get
	        {
				return base.Getbool(ColumnNames.AppIsSiteOffline);
			}
			set
	        {
				base.Setbool(ColumnNames.AppIsSiteOffline, value);
			}
		}

		public virtual string AppSiteOfflineMessage
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppSiteOfflineMessage);
			}
			set
	        {
				base.Setstring(ColumnNames.AppSiteOfflineMessage, value);
			}
		}

		public virtual string AppSiteOfflineImage
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppSiteOfflineImage);
			}
			set
	        {
				base.Setstring(ColumnNames.AppSiteOfflineImage, value);
			}
		}

		public virtual string AppSiteLogo
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppSiteLogo);
			}
			set
	        {
				base.Setstring(ColumnNames.AppSiteLogo, value);
			}
		}

		public virtual string AppSiteFavicon
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppSiteFavicon);
			}
			set
	        {
				base.Setstring(ColumnNames.AppSiteFavicon, value);
			}
		}

		public virtual string AppSiteTagLine
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppSiteTagLine);
			}
			set
	        {
				base.Setstring(ColumnNames.AppSiteTagLine, value);
			}
		}

		public virtual string AppSiteDefaultListLimit
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppSiteDefaultListLimit);
			}
			set
	        {
				base.Setstring(ColumnNames.AppSiteDefaultListLimit, value);
			}
		}

		public virtual string AppPathToFolder
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppPathToFolder);
			}
			set
	        {
				base.Setstring(ColumnNames.AppPathToFolder, value);
			}
		}

		public virtual string AppDatasource
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppDatasource);
			}
			set
	        {
				base.Setstring(ColumnNames.AppDatasource, value);
			}
		}

		public virtual string AppDatasourceUserName
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppDatasourceUserName);
			}
			set
	        {
				base.Setstring(ColumnNames.AppDatasourceUserName, value);
			}
		}

		public virtual string AppDatasourcePassword
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppDatasourcePassword);
			}
			set
	        {
				base.Setstring(ColumnNames.AppDatasourcePassword, value);
			}
		}

		public virtual bool AppIsUseIntegratedSecurity
	    {
			get
	        {
				return base.Getbool(ColumnNames.AppIsUseIntegratedSecurity);
			}
			set
	        {
				base.Setbool(ColumnNames.AppIsUseIntegratedSecurity, value);
			}
		}

		public virtual string AppDatabaseName
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppDatabaseName);
			}
			set
	        {
				base.Setstring(ColumnNames.AppDatabaseName, value);
			}
		}

		public virtual string AppSiteEmail
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppSiteEmail);
			}
			set
	        {
				base.Setstring(ColumnNames.AppSiteEmail, value);
			}
		}

		public virtual string AppRecepientEmail
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppRecepientEmail);
			}
			set
	        {
				base.Setstring(ColumnNames.AppRecepientEmail, value);
			}
		}

		public virtual string AppSMTP
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppSMTP);
			}
			set
	        {
				base.Setstring(ColumnNames.AppSMTP, value);
			}
		}

		public virtual string AppEmailPassword
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppEmailPassword);
			}
			set
	        {
				base.Setstring(ColumnNames.AppEmailPassword, value);
			}
		}

		public virtual string AppPortNumber
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppPortNumber);
			}
			set
	        {
				base.Setstring(ColumnNames.AppPortNumber, value);
			}
		}

		public virtual int AppCreatedBy
	    {
			get
	        {
				return base.Getint(ColumnNames.AppCreatedBy);
			}
			set
	        {
				base.Setint(ColumnNames.AppCreatedBy, value);
			}
		}

		public virtual DateTime AppCreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.AppCreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.AppCreatedDate, value);
			}
		}

		public virtual bool AppIsCOD
	    {
			get
	        {
				return base.Getbool(ColumnNames.AppIsCOD);
			}
			set
	        {
				base.Setbool(ColumnNames.AppIsCOD, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_AppSettingsId
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppSettingsId) ? string.Empty : base.GetintAsString(ColumnNames.AppSettingsId);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppSettingsId);
				else
					this.AppSettingsId = base.SetintAsString(ColumnNames.AppSettingsId, value);
			}
		}

		public virtual string s_AppSiteName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppSiteName) ? string.Empty : base.GetstringAsString(ColumnNames.AppSiteName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppSiteName);
				else
					this.AppSiteName = base.SetstringAsString(ColumnNames.AppSiteName, value);
			}
		}

		public virtual string s_AppSiteTitle
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppSiteTitle) ? string.Empty : base.GetstringAsString(ColumnNames.AppSiteTitle);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppSiteTitle);
				else
					this.AppSiteTitle = base.SetstringAsString(ColumnNames.AppSiteTitle, value);
			}
		}

		public virtual string s_AppClientSiteURL
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppClientSiteURL) ? string.Empty : base.GetstringAsString(ColumnNames.AppClientSiteURL);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppClientSiteURL);
				else
					this.AppClientSiteURL = base.SetstringAsString(ColumnNames.AppClientSiteURL, value);
			}
		}

		public virtual string s_AppFooterText
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppFooterText) ? string.Empty : base.GetstringAsString(ColumnNames.AppFooterText);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppFooterText);
				else
					this.AppFooterText = base.SetstringAsString(ColumnNames.AppFooterText, value);
			}
		}

		public virtual string s_AppIsSiteOffline
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppIsSiteOffline) ? string.Empty : base.GetboolAsString(ColumnNames.AppIsSiteOffline);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppIsSiteOffline);
				else
					this.AppIsSiteOffline = base.SetboolAsString(ColumnNames.AppIsSiteOffline, value);
			}
		}

		public virtual string s_AppSiteOfflineMessage
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppSiteOfflineMessage) ? string.Empty : base.GetstringAsString(ColumnNames.AppSiteOfflineMessage);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppSiteOfflineMessage);
				else
					this.AppSiteOfflineMessage = base.SetstringAsString(ColumnNames.AppSiteOfflineMessage, value);
			}
		}

		public virtual string s_AppSiteOfflineImage
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppSiteOfflineImage) ? string.Empty : base.GetstringAsString(ColumnNames.AppSiteOfflineImage);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppSiteOfflineImage);
				else
					this.AppSiteOfflineImage = base.SetstringAsString(ColumnNames.AppSiteOfflineImage, value);
			}
		}

		public virtual string s_AppSiteLogo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppSiteLogo) ? string.Empty : base.GetstringAsString(ColumnNames.AppSiteLogo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppSiteLogo);
				else
					this.AppSiteLogo = base.SetstringAsString(ColumnNames.AppSiteLogo, value);
			}
		}

		public virtual string s_AppSiteFavicon
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppSiteFavicon) ? string.Empty : base.GetstringAsString(ColumnNames.AppSiteFavicon);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppSiteFavicon);
				else
					this.AppSiteFavicon = base.SetstringAsString(ColumnNames.AppSiteFavicon, value);
			}
		}

		public virtual string s_AppSiteTagLine
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppSiteTagLine) ? string.Empty : base.GetstringAsString(ColumnNames.AppSiteTagLine);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppSiteTagLine);
				else
					this.AppSiteTagLine = base.SetstringAsString(ColumnNames.AppSiteTagLine, value);
			}
		}

		public virtual string s_AppSiteDefaultListLimit
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppSiteDefaultListLimit) ? string.Empty : base.GetstringAsString(ColumnNames.AppSiteDefaultListLimit);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppSiteDefaultListLimit);
				else
					this.AppSiteDefaultListLimit = base.SetstringAsString(ColumnNames.AppSiteDefaultListLimit, value);
			}
		}

		public virtual string s_AppPathToFolder
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppPathToFolder) ? string.Empty : base.GetstringAsString(ColumnNames.AppPathToFolder);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppPathToFolder);
				else
					this.AppPathToFolder = base.SetstringAsString(ColumnNames.AppPathToFolder, value);
			}
		}

		public virtual string s_AppDatasource
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppDatasource) ? string.Empty : base.GetstringAsString(ColumnNames.AppDatasource);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppDatasource);
				else
					this.AppDatasource = base.SetstringAsString(ColumnNames.AppDatasource, value);
			}
		}

		public virtual string s_AppDatasourceUserName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppDatasourceUserName) ? string.Empty : base.GetstringAsString(ColumnNames.AppDatasourceUserName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppDatasourceUserName);
				else
					this.AppDatasourceUserName = base.SetstringAsString(ColumnNames.AppDatasourceUserName, value);
			}
		}

		public virtual string s_AppDatasourcePassword
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppDatasourcePassword) ? string.Empty : base.GetstringAsString(ColumnNames.AppDatasourcePassword);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppDatasourcePassword);
				else
					this.AppDatasourcePassword = base.SetstringAsString(ColumnNames.AppDatasourcePassword, value);
			}
		}

		public virtual string s_AppIsUseIntegratedSecurity
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppIsUseIntegratedSecurity) ? string.Empty : base.GetboolAsString(ColumnNames.AppIsUseIntegratedSecurity);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppIsUseIntegratedSecurity);
				else
					this.AppIsUseIntegratedSecurity = base.SetboolAsString(ColumnNames.AppIsUseIntegratedSecurity, value);
			}
		}

		public virtual string s_AppDatabaseName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppDatabaseName) ? string.Empty : base.GetstringAsString(ColumnNames.AppDatabaseName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppDatabaseName);
				else
					this.AppDatabaseName = base.SetstringAsString(ColumnNames.AppDatabaseName, value);
			}
		}

		public virtual string s_AppSiteEmail
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppSiteEmail) ? string.Empty : base.GetstringAsString(ColumnNames.AppSiteEmail);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppSiteEmail);
				else
					this.AppSiteEmail = base.SetstringAsString(ColumnNames.AppSiteEmail, value);
			}
		}

		public virtual string s_AppRecepientEmail
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppRecepientEmail) ? string.Empty : base.GetstringAsString(ColumnNames.AppRecepientEmail);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppRecepientEmail);
				else
					this.AppRecepientEmail = base.SetstringAsString(ColumnNames.AppRecepientEmail, value);
			}
		}

		public virtual string s_AppSMTP
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppSMTP) ? string.Empty : base.GetstringAsString(ColumnNames.AppSMTP);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppSMTP);
				else
					this.AppSMTP = base.SetstringAsString(ColumnNames.AppSMTP, value);
			}
		}

		public virtual string s_AppEmailPassword
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppEmailPassword) ? string.Empty : base.GetstringAsString(ColumnNames.AppEmailPassword);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppEmailPassword);
				else
					this.AppEmailPassword = base.SetstringAsString(ColumnNames.AppEmailPassword, value);
			}
		}

		public virtual string s_AppPortNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppPortNumber) ? string.Empty : base.GetstringAsString(ColumnNames.AppPortNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppPortNumber);
				else
					this.AppPortNumber = base.SetstringAsString(ColumnNames.AppPortNumber, value);
			}
		}

		public virtual string s_AppCreatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppCreatedBy) ? string.Empty : base.GetintAsString(ColumnNames.AppCreatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppCreatedBy);
				else
					this.AppCreatedBy = base.SetintAsString(ColumnNames.AppCreatedBy, value);
			}
		}

		public virtual string s_AppCreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppCreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.AppCreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppCreatedDate);
				else
					this.AppCreatedDate = base.SetDateTimeAsString(ColumnNames.AppCreatedDate, value);
			}
		}

		public virtual string s_AppIsCOD
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppIsCOD) ? string.Empty : base.GetboolAsString(ColumnNames.AppIsCOD);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppIsCOD);
				else
					this.AppIsCOD = base.SetboolAsString(ColumnNames.AppIsCOD, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter AppSettingsId
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppSettingsId, Parameters.AppSettingsId);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppSiteName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppSiteName, Parameters.AppSiteName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppSiteTitle
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppSiteTitle, Parameters.AppSiteTitle);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppClientSiteURL
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppClientSiteURL, Parameters.AppClientSiteURL);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppFooterText
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppFooterText, Parameters.AppFooterText);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppIsSiteOffline
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppIsSiteOffline, Parameters.AppIsSiteOffline);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppSiteOfflineMessage
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppSiteOfflineMessage, Parameters.AppSiteOfflineMessage);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppSiteOfflineImage
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppSiteOfflineImage, Parameters.AppSiteOfflineImage);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppSiteLogo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppSiteLogo, Parameters.AppSiteLogo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppSiteFavicon
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppSiteFavicon, Parameters.AppSiteFavicon);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppSiteTagLine
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppSiteTagLine, Parameters.AppSiteTagLine);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppSiteDefaultListLimit
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppSiteDefaultListLimit, Parameters.AppSiteDefaultListLimit);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppPathToFolder
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppPathToFolder, Parameters.AppPathToFolder);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppDatasource
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppDatasource, Parameters.AppDatasource);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppDatasourceUserName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppDatasourceUserName, Parameters.AppDatasourceUserName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppDatasourcePassword
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppDatasourcePassword, Parameters.AppDatasourcePassword);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppIsUseIntegratedSecurity
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppIsUseIntegratedSecurity, Parameters.AppIsUseIntegratedSecurity);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppDatabaseName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppDatabaseName, Parameters.AppDatabaseName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppSiteEmail
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppSiteEmail, Parameters.AppSiteEmail);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppRecepientEmail
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppRecepientEmail, Parameters.AppRecepientEmail);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppSMTP
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppSMTP, Parameters.AppSMTP);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppEmailPassword
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppEmailPassword, Parameters.AppEmailPassword);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppPortNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppPortNumber, Parameters.AppPortNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppCreatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppCreatedBy, Parameters.AppCreatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppCreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppCreatedDate, Parameters.AppCreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppIsCOD
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppIsCOD, Parameters.AppIsCOD);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter AppSettingsId
		    {
				get
		        {
					if(_AppSettingsId_W == null)
	        	    {
						_AppSettingsId_W = TearOff.AppSettingsId;
					}
					return _AppSettingsId_W;
				}
			}

			public WhereParameter AppSiteName
		    {
				get
		        {
					if(_AppSiteName_W == null)
	        	    {
						_AppSiteName_W = TearOff.AppSiteName;
					}
					return _AppSiteName_W;
				}
			}

			public WhereParameter AppSiteTitle
		    {
				get
		        {
					if(_AppSiteTitle_W == null)
	        	    {
						_AppSiteTitle_W = TearOff.AppSiteTitle;
					}
					return _AppSiteTitle_W;
				}
			}

			public WhereParameter AppClientSiteURL
		    {
				get
		        {
					if(_AppClientSiteURL_W == null)
	        	    {
						_AppClientSiteURL_W = TearOff.AppClientSiteURL;
					}
					return _AppClientSiteURL_W;
				}
			}

			public WhereParameter AppFooterText
		    {
				get
		        {
					if(_AppFooterText_W == null)
	        	    {
						_AppFooterText_W = TearOff.AppFooterText;
					}
					return _AppFooterText_W;
				}
			}

			public WhereParameter AppIsSiteOffline
		    {
				get
		        {
					if(_AppIsSiteOffline_W == null)
	        	    {
						_AppIsSiteOffline_W = TearOff.AppIsSiteOffline;
					}
					return _AppIsSiteOffline_W;
				}
			}

			public WhereParameter AppSiteOfflineMessage
		    {
				get
		        {
					if(_AppSiteOfflineMessage_W == null)
	        	    {
						_AppSiteOfflineMessage_W = TearOff.AppSiteOfflineMessage;
					}
					return _AppSiteOfflineMessage_W;
				}
			}

			public WhereParameter AppSiteOfflineImage
		    {
				get
		        {
					if(_AppSiteOfflineImage_W == null)
	        	    {
						_AppSiteOfflineImage_W = TearOff.AppSiteOfflineImage;
					}
					return _AppSiteOfflineImage_W;
				}
			}

			public WhereParameter AppSiteLogo
		    {
				get
		        {
					if(_AppSiteLogo_W == null)
	        	    {
						_AppSiteLogo_W = TearOff.AppSiteLogo;
					}
					return _AppSiteLogo_W;
				}
			}

			public WhereParameter AppSiteFavicon
		    {
				get
		        {
					if(_AppSiteFavicon_W == null)
	        	    {
						_AppSiteFavicon_W = TearOff.AppSiteFavicon;
					}
					return _AppSiteFavicon_W;
				}
			}

			public WhereParameter AppSiteTagLine
		    {
				get
		        {
					if(_AppSiteTagLine_W == null)
	        	    {
						_AppSiteTagLine_W = TearOff.AppSiteTagLine;
					}
					return _AppSiteTagLine_W;
				}
			}

			public WhereParameter AppSiteDefaultListLimit
		    {
				get
		        {
					if(_AppSiteDefaultListLimit_W == null)
	        	    {
						_AppSiteDefaultListLimit_W = TearOff.AppSiteDefaultListLimit;
					}
					return _AppSiteDefaultListLimit_W;
				}
			}

			public WhereParameter AppPathToFolder
		    {
				get
		        {
					if(_AppPathToFolder_W == null)
	        	    {
						_AppPathToFolder_W = TearOff.AppPathToFolder;
					}
					return _AppPathToFolder_W;
				}
			}

			public WhereParameter AppDatasource
		    {
				get
		        {
					if(_AppDatasource_W == null)
	        	    {
						_AppDatasource_W = TearOff.AppDatasource;
					}
					return _AppDatasource_W;
				}
			}

			public WhereParameter AppDatasourceUserName
		    {
				get
		        {
					if(_AppDatasourceUserName_W == null)
	        	    {
						_AppDatasourceUserName_W = TearOff.AppDatasourceUserName;
					}
					return _AppDatasourceUserName_W;
				}
			}

			public WhereParameter AppDatasourcePassword
		    {
				get
		        {
					if(_AppDatasourcePassword_W == null)
	        	    {
						_AppDatasourcePassword_W = TearOff.AppDatasourcePassword;
					}
					return _AppDatasourcePassword_W;
				}
			}

			public WhereParameter AppIsUseIntegratedSecurity
		    {
				get
		        {
					if(_AppIsUseIntegratedSecurity_W == null)
	        	    {
						_AppIsUseIntegratedSecurity_W = TearOff.AppIsUseIntegratedSecurity;
					}
					return _AppIsUseIntegratedSecurity_W;
				}
			}

			public WhereParameter AppDatabaseName
		    {
				get
		        {
					if(_AppDatabaseName_W == null)
	        	    {
						_AppDatabaseName_W = TearOff.AppDatabaseName;
					}
					return _AppDatabaseName_W;
				}
			}

			public WhereParameter AppSiteEmail
		    {
				get
		        {
					if(_AppSiteEmail_W == null)
	        	    {
						_AppSiteEmail_W = TearOff.AppSiteEmail;
					}
					return _AppSiteEmail_W;
				}
			}

			public WhereParameter AppRecepientEmail
		    {
				get
		        {
					if(_AppRecepientEmail_W == null)
	        	    {
						_AppRecepientEmail_W = TearOff.AppRecepientEmail;
					}
					return _AppRecepientEmail_W;
				}
			}

			public WhereParameter AppSMTP
		    {
				get
		        {
					if(_AppSMTP_W == null)
	        	    {
						_AppSMTP_W = TearOff.AppSMTP;
					}
					return _AppSMTP_W;
				}
			}

			public WhereParameter AppEmailPassword
		    {
				get
		        {
					if(_AppEmailPassword_W == null)
	        	    {
						_AppEmailPassword_W = TearOff.AppEmailPassword;
					}
					return _AppEmailPassword_W;
				}
			}

			public WhereParameter AppPortNumber
		    {
				get
		        {
					if(_AppPortNumber_W == null)
	        	    {
						_AppPortNumber_W = TearOff.AppPortNumber;
					}
					return _AppPortNumber_W;
				}
			}

			public WhereParameter AppCreatedBy
		    {
				get
		        {
					if(_AppCreatedBy_W == null)
	        	    {
						_AppCreatedBy_W = TearOff.AppCreatedBy;
					}
					return _AppCreatedBy_W;
				}
			}

			public WhereParameter AppCreatedDate
		    {
				get
		        {
					if(_AppCreatedDate_W == null)
	        	    {
						_AppCreatedDate_W = TearOff.AppCreatedDate;
					}
					return _AppCreatedDate_W;
				}
			}

			public WhereParameter AppIsCOD
		    {
				get
		        {
					if(_AppIsCOD_W == null)
	        	    {
						_AppIsCOD_W = TearOff.AppIsCOD;
					}
					return _AppIsCOD_W;
				}
			}

			private WhereParameter _AppSettingsId_W = null;
			private WhereParameter _AppSiteName_W = null;
			private WhereParameter _AppSiteTitle_W = null;
			private WhereParameter _AppClientSiteURL_W = null;
			private WhereParameter _AppFooterText_W = null;
			private WhereParameter _AppIsSiteOffline_W = null;
			private WhereParameter _AppSiteOfflineMessage_W = null;
			private WhereParameter _AppSiteOfflineImage_W = null;
			private WhereParameter _AppSiteLogo_W = null;
			private WhereParameter _AppSiteFavicon_W = null;
			private WhereParameter _AppSiteTagLine_W = null;
			private WhereParameter _AppSiteDefaultListLimit_W = null;
			private WhereParameter _AppPathToFolder_W = null;
			private WhereParameter _AppDatasource_W = null;
			private WhereParameter _AppDatasourceUserName_W = null;
			private WhereParameter _AppDatasourcePassword_W = null;
			private WhereParameter _AppIsUseIntegratedSecurity_W = null;
			private WhereParameter _AppDatabaseName_W = null;
			private WhereParameter _AppSiteEmail_W = null;
			private WhereParameter _AppRecepientEmail_W = null;
			private WhereParameter _AppSMTP_W = null;
			private WhereParameter _AppEmailPassword_W = null;
			private WhereParameter _AppPortNumber_W = null;
			private WhereParameter _AppCreatedBy_W = null;
			private WhereParameter _AppCreatedDate_W = null;
			private WhereParameter _AppIsCOD_W = null;

			public void WhereClauseReset()
			{
				_AppSettingsId_W = null;
				_AppSiteName_W = null;
				_AppSiteTitle_W = null;
				_AppClientSiteURL_W = null;
				_AppFooterText_W = null;
				_AppIsSiteOffline_W = null;
				_AppSiteOfflineMessage_W = null;
				_AppSiteOfflineImage_W = null;
				_AppSiteLogo_W = null;
				_AppSiteFavicon_W = null;
				_AppSiteTagLine_W = null;
				_AppSiteDefaultListLimit_W = null;
				_AppPathToFolder_W = null;
				_AppDatasource_W = null;
				_AppDatasourceUserName_W = null;
				_AppDatasourcePassword_W = null;
				_AppIsUseIntegratedSecurity_W = null;
				_AppDatabaseName_W = null;
				_AppSiteEmail_W = null;
				_AppRecepientEmail_W = null;
				_AppSMTP_W = null;
				_AppEmailPassword_W = null;
				_AppPortNumber_W = null;
				_AppCreatedBy_W = null;
				_AppCreatedDate_W = null;
				_AppIsCOD_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter AppSettingsId
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppSettingsId, Parameters.AppSettingsId);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppSiteName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppSiteName, Parameters.AppSiteName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppSiteTitle
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppSiteTitle, Parameters.AppSiteTitle);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppClientSiteURL
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppClientSiteURL, Parameters.AppClientSiteURL);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppFooterText
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppFooterText, Parameters.AppFooterText);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppIsSiteOffline
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppIsSiteOffline, Parameters.AppIsSiteOffline);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppSiteOfflineMessage
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppSiteOfflineMessage, Parameters.AppSiteOfflineMessage);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppSiteOfflineImage
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppSiteOfflineImage, Parameters.AppSiteOfflineImage);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppSiteLogo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppSiteLogo, Parameters.AppSiteLogo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppSiteFavicon
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppSiteFavicon, Parameters.AppSiteFavicon);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppSiteTagLine
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppSiteTagLine, Parameters.AppSiteTagLine);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppSiteDefaultListLimit
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppSiteDefaultListLimit, Parameters.AppSiteDefaultListLimit);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppPathToFolder
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppPathToFolder, Parameters.AppPathToFolder);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppDatasource
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppDatasource, Parameters.AppDatasource);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppDatasourceUserName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppDatasourceUserName, Parameters.AppDatasourceUserName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppDatasourcePassword
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppDatasourcePassword, Parameters.AppDatasourcePassword);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppIsUseIntegratedSecurity
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppIsUseIntegratedSecurity, Parameters.AppIsUseIntegratedSecurity);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppDatabaseName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppDatabaseName, Parameters.AppDatabaseName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppSiteEmail
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppSiteEmail, Parameters.AppSiteEmail);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppRecepientEmail
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppRecepientEmail, Parameters.AppRecepientEmail);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppSMTP
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppSMTP, Parameters.AppSMTP);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppEmailPassword
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppEmailPassword, Parameters.AppEmailPassword);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppPortNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppPortNumber, Parameters.AppPortNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppCreatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppCreatedBy, Parameters.AppCreatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppCreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppCreatedDate, Parameters.AppCreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppIsCOD
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppIsCOD, Parameters.AppIsCOD);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter AppSettingsId
		    {
				get
		        {
					if(_AppSettingsId_W == null)
	        	    {
						_AppSettingsId_W = TearOff.AppSettingsId;
					}
					return _AppSettingsId_W;
				}
			}

			public AggregateParameter AppSiteName
		    {
				get
		        {
					if(_AppSiteName_W == null)
	        	    {
						_AppSiteName_W = TearOff.AppSiteName;
					}
					return _AppSiteName_W;
				}
			}

			public AggregateParameter AppSiteTitle
		    {
				get
		        {
					if(_AppSiteTitle_W == null)
	        	    {
						_AppSiteTitle_W = TearOff.AppSiteTitle;
					}
					return _AppSiteTitle_W;
				}
			}

			public AggregateParameter AppClientSiteURL
		    {
				get
		        {
					if(_AppClientSiteURL_W == null)
	        	    {
						_AppClientSiteURL_W = TearOff.AppClientSiteURL;
					}
					return _AppClientSiteURL_W;
				}
			}

			public AggregateParameter AppFooterText
		    {
				get
		        {
					if(_AppFooterText_W == null)
	        	    {
						_AppFooterText_W = TearOff.AppFooterText;
					}
					return _AppFooterText_W;
				}
			}

			public AggregateParameter AppIsSiteOffline
		    {
				get
		        {
					if(_AppIsSiteOffline_W == null)
	        	    {
						_AppIsSiteOffline_W = TearOff.AppIsSiteOffline;
					}
					return _AppIsSiteOffline_W;
				}
			}

			public AggregateParameter AppSiteOfflineMessage
		    {
				get
		        {
					if(_AppSiteOfflineMessage_W == null)
	        	    {
						_AppSiteOfflineMessage_W = TearOff.AppSiteOfflineMessage;
					}
					return _AppSiteOfflineMessage_W;
				}
			}

			public AggregateParameter AppSiteOfflineImage
		    {
				get
		        {
					if(_AppSiteOfflineImage_W == null)
	        	    {
						_AppSiteOfflineImage_W = TearOff.AppSiteOfflineImage;
					}
					return _AppSiteOfflineImage_W;
				}
			}

			public AggregateParameter AppSiteLogo
		    {
				get
		        {
					if(_AppSiteLogo_W == null)
	        	    {
						_AppSiteLogo_W = TearOff.AppSiteLogo;
					}
					return _AppSiteLogo_W;
				}
			}

			public AggregateParameter AppSiteFavicon
		    {
				get
		        {
					if(_AppSiteFavicon_W == null)
	        	    {
						_AppSiteFavicon_W = TearOff.AppSiteFavicon;
					}
					return _AppSiteFavicon_W;
				}
			}

			public AggregateParameter AppSiteTagLine
		    {
				get
		        {
					if(_AppSiteTagLine_W == null)
	        	    {
						_AppSiteTagLine_W = TearOff.AppSiteTagLine;
					}
					return _AppSiteTagLine_W;
				}
			}

			public AggregateParameter AppSiteDefaultListLimit
		    {
				get
		        {
					if(_AppSiteDefaultListLimit_W == null)
	        	    {
						_AppSiteDefaultListLimit_W = TearOff.AppSiteDefaultListLimit;
					}
					return _AppSiteDefaultListLimit_W;
				}
			}

			public AggregateParameter AppPathToFolder
		    {
				get
		        {
					if(_AppPathToFolder_W == null)
	        	    {
						_AppPathToFolder_W = TearOff.AppPathToFolder;
					}
					return _AppPathToFolder_W;
				}
			}

			public AggregateParameter AppDatasource
		    {
				get
		        {
					if(_AppDatasource_W == null)
	        	    {
						_AppDatasource_W = TearOff.AppDatasource;
					}
					return _AppDatasource_W;
				}
			}

			public AggregateParameter AppDatasourceUserName
		    {
				get
		        {
					if(_AppDatasourceUserName_W == null)
	        	    {
						_AppDatasourceUserName_W = TearOff.AppDatasourceUserName;
					}
					return _AppDatasourceUserName_W;
				}
			}

			public AggregateParameter AppDatasourcePassword
		    {
				get
		        {
					if(_AppDatasourcePassword_W == null)
	        	    {
						_AppDatasourcePassword_W = TearOff.AppDatasourcePassword;
					}
					return _AppDatasourcePassword_W;
				}
			}

			public AggregateParameter AppIsUseIntegratedSecurity
		    {
				get
		        {
					if(_AppIsUseIntegratedSecurity_W == null)
	        	    {
						_AppIsUseIntegratedSecurity_W = TearOff.AppIsUseIntegratedSecurity;
					}
					return _AppIsUseIntegratedSecurity_W;
				}
			}

			public AggregateParameter AppDatabaseName
		    {
				get
		        {
					if(_AppDatabaseName_W == null)
	        	    {
						_AppDatabaseName_W = TearOff.AppDatabaseName;
					}
					return _AppDatabaseName_W;
				}
			}

			public AggregateParameter AppSiteEmail
		    {
				get
		        {
					if(_AppSiteEmail_W == null)
	        	    {
						_AppSiteEmail_W = TearOff.AppSiteEmail;
					}
					return _AppSiteEmail_W;
				}
			}

			public AggregateParameter AppRecepientEmail
		    {
				get
		        {
					if(_AppRecepientEmail_W == null)
	        	    {
						_AppRecepientEmail_W = TearOff.AppRecepientEmail;
					}
					return _AppRecepientEmail_W;
				}
			}

			public AggregateParameter AppSMTP
		    {
				get
		        {
					if(_AppSMTP_W == null)
	        	    {
						_AppSMTP_W = TearOff.AppSMTP;
					}
					return _AppSMTP_W;
				}
			}

			public AggregateParameter AppEmailPassword
		    {
				get
		        {
					if(_AppEmailPassword_W == null)
	        	    {
						_AppEmailPassword_W = TearOff.AppEmailPassword;
					}
					return _AppEmailPassword_W;
				}
			}

			public AggregateParameter AppPortNumber
		    {
				get
		        {
					if(_AppPortNumber_W == null)
	        	    {
						_AppPortNumber_W = TearOff.AppPortNumber;
					}
					return _AppPortNumber_W;
				}
			}

			public AggregateParameter AppCreatedBy
		    {
				get
		        {
					if(_AppCreatedBy_W == null)
	        	    {
						_AppCreatedBy_W = TearOff.AppCreatedBy;
					}
					return _AppCreatedBy_W;
				}
			}

			public AggregateParameter AppCreatedDate
		    {
				get
		        {
					if(_AppCreatedDate_W == null)
	        	    {
						_AppCreatedDate_W = TearOff.AppCreatedDate;
					}
					return _AppCreatedDate_W;
				}
			}

			public AggregateParameter AppIsCOD
		    {
				get
		        {
					if(_AppIsCOD_W == null)
	        	    {
						_AppIsCOD_W = TearOff.AppIsCOD;
					}
					return _AppIsCOD_W;
				}
			}

			private AggregateParameter _AppSettingsId_W = null;
			private AggregateParameter _AppSiteName_W = null;
			private AggregateParameter _AppSiteTitle_W = null;
			private AggregateParameter _AppClientSiteURL_W = null;
			private AggregateParameter _AppFooterText_W = null;
			private AggregateParameter _AppIsSiteOffline_W = null;
			private AggregateParameter _AppSiteOfflineMessage_W = null;
			private AggregateParameter _AppSiteOfflineImage_W = null;
			private AggregateParameter _AppSiteLogo_W = null;
			private AggregateParameter _AppSiteFavicon_W = null;
			private AggregateParameter _AppSiteTagLine_W = null;
			private AggregateParameter _AppSiteDefaultListLimit_W = null;
			private AggregateParameter _AppPathToFolder_W = null;
			private AggregateParameter _AppDatasource_W = null;
			private AggregateParameter _AppDatasourceUserName_W = null;
			private AggregateParameter _AppDatasourcePassword_W = null;
			private AggregateParameter _AppIsUseIntegratedSecurity_W = null;
			private AggregateParameter _AppDatabaseName_W = null;
			private AggregateParameter _AppSiteEmail_W = null;
			private AggregateParameter _AppRecepientEmail_W = null;
			private AggregateParameter _AppSMTP_W = null;
			private AggregateParameter _AppEmailPassword_W = null;
			private AggregateParameter _AppPortNumber_W = null;
			private AggregateParameter _AppCreatedBy_W = null;
			private AggregateParameter _AppCreatedDate_W = null;
			private AggregateParameter _AppIsCOD_W = null;

			public void AggregateClauseReset()
			{
				_AppSettingsId_W = null;
				_AppSiteName_W = null;
				_AppSiteTitle_W = null;
				_AppClientSiteURL_W = null;
				_AppFooterText_W = null;
				_AppIsSiteOffline_W = null;
				_AppSiteOfflineMessage_W = null;
				_AppSiteOfflineImage_W = null;
				_AppSiteLogo_W = null;
				_AppSiteFavicon_W = null;
				_AppSiteTagLine_W = null;
				_AppSiteDefaultListLimit_W = null;
				_AppPathToFolder_W = null;
				_AppDatasource_W = null;
				_AppDatasourceUserName_W = null;
				_AppDatasourcePassword_W = null;
				_AppIsUseIntegratedSecurity_W = null;
				_AppDatabaseName_W = null;
				_AppSiteEmail_W = null;
				_AppRecepientEmail_W = null;
				_AppSMTP_W = null;
				_AppEmailPassword_W = null;
				_AppPortNumber_W = null;
				_AppCreatedBy_W = null;
				_AppCreatedDate_W = null;
				_AppIsCOD_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblSettingsInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.AppSettingsId.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblSettingsUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblSettingsDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.AppSettingsId);
			p.SourceColumn = ColumnNames.AppSettingsId;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.AppSettingsId);
			p.SourceColumn = ColumnNames.AppSettingsId;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppSiteName);
			p.SourceColumn = ColumnNames.AppSiteName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppSiteTitle);
			p.SourceColumn = ColumnNames.AppSiteTitle;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppClientSiteURL);
			p.SourceColumn = ColumnNames.AppClientSiteURL;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppFooterText);
			p.SourceColumn = ColumnNames.AppFooterText;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppIsSiteOffline);
			p.SourceColumn = ColumnNames.AppIsSiteOffline;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppSiteOfflineMessage);
			p.SourceColumn = ColumnNames.AppSiteOfflineMessage;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppSiteOfflineImage);
			p.SourceColumn = ColumnNames.AppSiteOfflineImage;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppSiteLogo);
			p.SourceColumn = ColumnNames.AppSiteLogo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppSiteFavicon);
			p.SourceColumn = ColumnNames.AppSiteFavicon;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppSiteTagLine);
			p.SourceColumn = ColumnNames.AppSiteTagLine;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppSiteDefaultListLimit);
			p.SourceColumn = ColumnNames.AppSiteDefaultListLimit;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppPathToFolder);
			p.SourceColumn = ColumnNames.AppPathToFolder;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppDatasource);
			p.SourceColumn = ColumnNames.AppDatasource;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppDatasourceUserName);
			p.SourceColumn = ColumnNames.AppDatasourceUserName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppDatasourcePassword);
			p.SourceColumn = ColumnNames.AppDatasourcePassword;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppIsUseIntegratedSecurity);
			p.SourceColumn = ColumnNames.AppIsUseIntegratedSecurity;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppDatabaseName);
			p.SourceColumn = ColumnNames.AppDatabaseName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppSiteEmail);
			p.SourceColumn = ColumnNames.AppSiteEmail;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppRecepientEmail);
			p.SourceColumn = ColumnNames.AppRecepientEmail;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppSMTP);
			p.SourceColumn = ColumnNames.AppSMTP;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppEmailPassword);
			p.SourceColumn = ColumnNames.AppEmailPassword;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppPortNumber);
			p.SourceColumn = ColumnNames.AppPortNumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppCreatedBy);
			p.SourceColumn = ColumnNames.AppCreatedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppCreatedDate);
			p.SourceColumn = ColumnNames.AppCreatedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppIsCOD);
			p.SourceColumn = ColumnNames.AppIsCOD;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
