
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace BusinessLayer
{
	public abstract class _tblAddress : SqlClientEntity
	{
		public _tblAddress()
		{
			this.QuerySource = "tblAddress";
			this.MappingName = "tblAddress";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblAddressLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int AppAddressId)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.AppAddressId, AppAddressId);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblAddressLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter AppAddressId
			{
				get
				{
					return new SqlParameter("@AppAddressId", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AppCustomerID
			{
				get
				{
					return new SqlParameter("@AppCustomerID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AppAddress
			{
				get
				{
					return new SqlParameter("@AppAddress", SqlDbType.VarChar, 500);
				}
			}
			
			public static SqlParameter AppCityId
			{
				get
				{
					return new SqlParameter("@AppCityId", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AppStateId
			{
				get
				{
					return new SqlParameter("@AppStateId", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AppCountryId
			{
				get
				{
					return new SqlParameter("@AppCountryId", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AppPincode
			{
				get
				{
					return new SqlParameter("@AppPincode", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter AppIsDefault
			{
				get
				{
					return new SqlParameter("@AppIsDefault", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AppName
			{
				get
				{
					return new SqlParameter("@AppName", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter AppMobile
			{
				get
				{
					return new SqlParameter("@AppMobile", SqlDbType.VarChar, 15);
				}
			}
			
			public static SqlParameter AppEmail
			{
				get
				{
					return new SqlParameter("@AppEmail", SqlDbType.VarChar, 50);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string AppAddressId = "appAddressId";
            public const string AppCustomerID = "appCustomerID";
            public const string AppAddress = "appAddress";
            public const string AppCityId = "appCityId";
            public const string AppStateId = "appStateId";
            public const string AppCountryId = "appCountryId";
            public const string AppPincode = "appPincode";
            public const string AppIsDefault = "appIsDefault";
            public const string AppName = "appName";
            public const string AppMobile = "appMobile";
            public const string AppEmail = "appEmail";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[AppAddressId] = _tblAddress.PropertyNames.AppAddressId;
					ht[AppCustomerID] = _tblAddress.PropertyNames.AppCustomerID;
					ht[AppAddress] = _tblAddress.PropertyNames.AppAddress;
					ht[AppCityId] = _tblAddress.PropertyNames.AppCityId;
					ht[AppStateId] = _tblAddress.PropertyNames.AppStateId;
					ht[AppCountryId] = _tblAddress.PropertyNames.AppCountryId;
					ht[AppPincode] = _tblAddress.PropertyNames.AppPincode;
					ht[AppIsDefault] = _tblAddress.PropertyNames.AppIsDefault;
					ht[AppName] = _tblAddress.PropertyNames.AppName;
					ht[AppMobile] = _tblAddress.PropertyNames.AppMobile;
					ht[AppEmail] = _tblAddress.PropertyNames.AppEmail;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string AppAddressId = "AppAddressId";
            public const string AppCustomerID = "AppCustomerID";
            public const string AppAddress = "AppAddress";
            public const string AppCityId = "AppCityId";
            public const string AppStateId = "AppStateId";
            public const string AppCountryId = "AppCountryId";
            public const string AppPincode = "AppPincode";
            public const string AppIsDefault = "AppIsDefault";
            public const string AppName = "AppName";
            public const string AppMobile = "AppMobile";
            public const string AppEmail = "AppEmail";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[AppAddressId] = _tblAddress.ColumnNames.AppAddressId;
					ht[AppCustomerID] = _tblAddress.ColumnNames.AppCustomerID;
					ht[AppAddress] = _tblAddress.ColumnNames.AppAddress;
					ht[AppCityId] = _tblAddress.ColumnNames.AppCityId;
					ht[AppStateId] = _tblAddress.ColumnNames.AppStateId;
					ht[AppCountryId] = _tblAddress.ColumnNames.AppCountryId;
					ht[AppPincode] = _tblAddress.ColumnNames.AppPincode;
					ht[AppIsDefault] = _tblAddress.ColumnNames.AppIsDefault;
					ht[AppName] = _tblAddress.ColumnNames.AppName;
					ht[AppMobile] = _tblAddress.ColumnNames.AppMobile;
					ht[AppEmail] = _tblAddress.ColumnNames.AppEmail;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string AppAddressId = "s_AppAddressId";
            public const string AppCustomerID = "s_AppCustomerID";
            public const string AppAddress = "s_AppAddress";
            public const string AppCityId = "s_AppCityId";
            public const string AppStateId = "s_AppStateId";
            public const string AppCountryId = "s_AppCountryId";
            public const string AppPincode = "s_AppPincode";
            public const string AppIsDefault = "s_AppIsDefault";
            public const string AppName = "s_AppName";
            public const string AppMobile = "s_AppMobile";
            public const string AppEmail = "s_AppEmail";

		}
		#endregion		
		
		#region Properties
	
		public virtual int AppAddressId
	    {
			get
	        {
				return base.Getint(ColumnNames.AppAddressId);
			}
			set
	        {
				base.Setint(ColumnNames.AppAddressId, value);
			}
		}

		public virtual int AppCustomerID
	    {
			get
	        {
				return base.Getint(ColumnNames.AppCustomerID);
			}
			set
	        {
				base.Setint(ColumnNames.AppCustomerID, value);
			}
		}

		public virtual string AppAddress
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppAddress);
			}
			set
	        {
				base.Setstring(ColumnNames.AppAddress, value);
			}
		}

		public virtual int AppCityId
	    {
			get
	        {
				return base.Getint(ColumnNames.AppCityId);
			}
			set
	        {
				base.Setint(ColumnNames.AppCityId, value);
			}
		}

		public virtual int AppStateId
	    {
			get
	        {
				return base.Getint(ColumnNames.AppStateId);
			}
			set
	        {
				base.Setint(ColumnNames.AppStateId, value);
			}
		}

		public virtual int AppCountryId
	    {
			get
	        {
				return base.Getint(ColumnNames.AppCountryId);
			}
			set
	        {
				base.Setint(ColumnNames.AppCountryId, value);
			}
		}

		public virtual string AppPincode
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppPincode);
			}
			set
	        {
				base.Setstring(ColumnNames.AppPincode, value);
			}
		}

		public virtual bool AppIsDefault
	    {
			get
	        {
				return base.Getbool(ColumnNames.AppIsDefault);
			}
			set
	        {
				base.Setbool(ColumnNames.AppIsDefault, value);
			}
		}

		public virtual string AppName
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppName);
			}
			set
	        {
				base.Setstring(ColumnNames.AppName, value);
			}
		}

		public virtual string AppMobile
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppMobile);
			}
			set
	        {
				base.Setstring(ColumnNames.AppMobile, value);
			}
		}

		public virtual string AppEmail
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppEmail);
			}
			set
	        {
				base.Setstring(ColumnNames.AppEmail, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_AppAddressId
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppAddressId) ? string.Empty : base.GetintAsString(ColumnNames.AppAddressId);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppAddressId);
				else
					this.AppAddressId = base.SetintAsString(ColumnNames.AppAddressId, value);
			}
		}

		public virtual string s_AppCustomerID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppCustomerID) ? string.Empty : base.GetintAsString(ColumnNames.AppCustomerID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppCustomerID);
				else
					this.AppCustomerID = base.SetintAsString(ColumnNames.AppCustomerID, value);
			}
		}

		public virtual string s_AppAddress
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppAddress) ? string.Empty : base.GetstringAsString(ColumnNames.AppAddress);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppAddress);
				else
					this.AppAddress = base.SetstringAsString(ColumnNames.AppAddress, value);
			}
		}

		public virtual string s_AppCityId
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppCityId) ? string.Empty : base.GetintAsString(ColumnNames.AppCityId);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppCityId);
				else
					this.AppCityId = base.SetintAsString(ColumnNames.AppCityId, value);
			}
		}

		public virtual string s_AppStateId
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppStateId) ? string.Empty : base.GetintAsString(ColumnNames.AppStateId);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppStateId);
				else
					this.AppStateId = base.SetintAsString(ColumnNames.AppStateId, value);
			}
		}

		public virtual string s_AppCountryId
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppCountryId) ? string.Empty : base.GetintAsString(ColumnNames.AppCountryId);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppCountryId);
				else
					this.AppCountryId = base.SetintAsString(ColumnNames.AppCountryId, value);
			}
		}

		public virtual string s_AppPincode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppPincode) ? string.Empty : base.GetstringAsString(ColumnNames.AppPincode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppPincode);
				else
					this.AppPincode = base.SetstringAsString(ColumnNames.AppPincode, value);
			}
		}

		public virtual string s_AppIsDefault
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppIsDefault) ? string.Empty : base.GetboolAsString(ColumnNames.AppIsDefault);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppIsDefault);
				else
					this.AppIsDefault = base.SetboolAsString(ColumnNames.AppIsDefault, value);
			}
		}

		public virtual string s_AppName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppName) ? string.Empty : base.GetstringAsString(ColumnNames.AppName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppName);
				else
					this.AppName = base.SetstringAsString(ColumnNames.AppName, value);
			}
		}

		public virtual string s_AppMobile
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppMobile) ? string.Empty : base.GetstringAsString(ColumnNames.AppMobile);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppMobile);
				else
					this.AppMobile = base.SetstringAsString(ColumnNames.AppMobile, value);
			}
		}

		public virtual string s_AppEmail
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppEmail) ? string.Empty : base.GetstringAsString(ColumnNames.AppEmail);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppEmail);
				else
					this.AppEmail = base.SetstringAsString(ColumnNames.AppEmail, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter AppAddressId
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppAddressId, Parameters.AppAddressId);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppCustomerID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppCustomerID, Parameters.AppCustomerID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppAddress
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppAddress, Parameters.AppAddress);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppCityId
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppCityId, Parameters.AppCityId);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppStateId
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppStateId, Parameters.AppStateId);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppCountryId
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppCountryId, Parameters.AppCountryId);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppPincode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppPincode, Parameters.AppPincode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppIsDefault
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppIsDefault, Parameters.AppIsDefault);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppName, Parameters.AppName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppMobile
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppMobile, Parameters.AppMobile);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppEmail
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppEmail, Parameters.AppEmail);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter AppAddressId
		    {
				get
		        {
					if(_AppAddressId_W == null)
	        	    {
						_AppAddressId_W = TearOff.AppAddressId;
					}
					return _AppAddressId_W;
				}
			}

			public WhereParameter AppCustomerID
		    {
				get
		        {
					if(_AppCustomerID_W == null)
	        	    {
						_AppCustomerID_W = TearOff.AppCustomerID;
					}
					return _AppCustomerID_W;
				}
			}

			public WhereParameter AppAddress
		    {
				get
		        {
					if(_AppAddress_W == null)
	        	    {
						_AppAddress_W = TearOff.AppAddress;
					}
					return _AppAddress_W;
				}
			}

			public WhereParameter AppCityId
		    {
				get
		        {
					if(_AppCityId_W == null)
	        	    {
						_AppCityId_W = TearOff.AppCityId;
					}
					return _AppCityId_W;
				}
			}

			public WhereParameter AppStateId
		    {
				get
		        {
					if(_AppStateId_W == null)
	        	    {
						_AppStateId_W = TearOff.AppStateId;
					}
					return _AppStateId_W;
				}
			}

			public WhereParameter AppCountryId
		    {
				get
		        {
					if(_AppCountryId_W == null)
	        	    {
						_AppCountryId_W = TearOff.AppCountryId;
					}
					return _AppCountryId_W;
				}
			}

			public WhereParameter AppPincode
		    {
				get
		        {
					if(_AppPincode_W == null)
	        	    {
						_AppPincode_W = TearOff.AppPincode;
					}
					return _AppPincode_W;
				}
			}

			public WhereParameter AppIsDefault
		    {
				get
		        {
					if(_AppIsDefault_W == null)
	        	    {
						_AppIsDefault_W = TearOff.AppIsDefault;
					}
					return _AppIsDefault_W;
				}
			}

			public WhereParameter AppName
		    {
				get
		        {
					if(_AppName_W == null)
	        	    {
						_AppName_W = TearOff.AppName;
					}
					return _AppName_W;
				}
			}

			public WhereParameter AppMobile
		    {
				get
		        {
					if(_AppMobile_W == null)
	        	    {
						_AppMobile_W = TearOff.AppMobile;
					}
					return _AppMobile_W;
				}
			}

			public WhereParameter AppEmail
		    {
				get
		        {
					if(_AppEmail_W == null)
	        	    {
						_AppEmail_W = TearOff.AppEmail;
					}
					return _AppEmail_W;
				}
			}

			private WhereParameter _AppAddressId_W = null;
			private WhereParameter _AppCustomerID_W = null;
			private WhereParameter _AppAddress_W = null;
			private WhereParameter _AppCityId_W = null;
			private WhereParameter _AppStateId_W = null;
			private WhereParameter _AppCountryId_W = null;
			private WhereParameter _AppPincode_W = null;
			private WhereParameter _AppIsDefault_W = null;
			private WhereParameter _AppName_W = null;
			private WhereParameter _AppMobile_W = null;
			private WhereParameter _AppEmail_W = null;

			public void WhereClauseReset()
			{
				_AppAddressId_W = null;
				_AppCustomerID_W = null;
				_AppAddress_W = null;
				_AppCityId_W = null;
				_AppStateId_W = null;
				_AppCountryId_W = null;
				_AppPincode_W = null;
				_AppIsDefault_W = null;
				_AppName_W = null;
				_AppMobile_W = null;
				_AppEmail_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter AppAddressId
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppAddressId, Parameters.AppAddressId);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppCustomerID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppCustomerID, Parameters.AppCustomerID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppAddress
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppAddress, Parameters.AppAddress);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppCityId
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppCityId, Parameters.AppCityId);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppStateId
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppStateId, Parameters.AppStateId);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppCountryId
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppCountryId, Parameters.AppCountryId);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppPincode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppPincode, Parameters.AppPincode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppIsDefault
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppIsDefault, Parameters.AppIsDefault);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppName, Parameters.AppName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppMobile
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppMobile, Parameters.AppMobile);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppEmail
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppEmail, Parameters.AppEmail);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter AppAddressId
		    {
				get
		        {
					if(_AppAddressId_W == null)
	        	    {
						_AppAddressId_W = TearOff.AppAddressId;
					}
					return _AppAddressId_W;
				}
			}

			public AggregateParameter AppCustomerID
		    {
				get
		        {
					if(_AppCustomerID_W == null)
	        	    {
						_AppCustomerID_W = TearOff.AppCustomerID;
					}
					return _AppCustomerID_W;
				}
			}

			public AggregateParameter AppAddress
		    {
				get
		        {
					if(_AppAddress_W == null)
	        	    {
						_AppAddress_W = TearOff.AppAddress;
					}
					return _AppAddress_W;
				}
			}

			public AggregateParameter AppCityId
		    {
				get
		        {
					if(_AppCityId_W == null)
	        	    {
						_AppCityId_W = TearOff.AppCityId;
					}
					return _AppCityId_W;
				}
			}

			public AggregateParameter AppStateId
		    {
				get
		        {
					if(_AppStateId_W == null)
	        	    {
						_AppStateId_W = TearOff.AppStateId;
					}
					return _AppStateId_W;
				}
			}

			public AggregateParameter AppCountryId
		    {
				get
		        {
					if(_AppCountryId_W == null)
	        	    {
						_AppCountryId_W = TearOff.AppCountryId;
					}
					return _AppCountryId_W;
				}
			}

			public AggregateParameter AppPincode
		    {
				get
		        {
					if(_AppPincode_W == null)
	        	    {
						_AppPincode_W = TearOff.AppPincode;
					}
					return _AppPincode_W;
				}
			}

			public AggregateParameter AppIsDefault
		    {
				get
		        {
					if(_AppIsDefault_W == null)
	        	    {
						_AppIsDefault_W = TearOff.AppIsDefault;
					}
					return _AppIsDefault_W;
				}
			}

			public AggregateParameter AppName
		    {
				get
		        {
					if(_AppName_W == null)
	        	    {
						_AppName_W = TearOff.AppName;
					}
					return _AppName_W;
				}
			}

			public AggregateParameter AppMobile
		    {
				get
		        {
					if(_AppMobile_W == null)
	        	    {
						_AppMobile_W = TearOff.AppMobile;
					}
					return _AppMobile_W;
				}
			}

			public AggregateParameter AppEmail
		    {
				get
		        {
					if(_AppEmail_W == null)
	        	    {
						_AppEmail_W = TearOff.AppEmail;
					}
					return _AppEmail_W;
				}
			}

			private AggregateParameter _AppAddressId_W = null;
			private AggregateParameter _AppCustomerID_W = null;
			private AggregateParameter _AppAddress_W = null;
			private AggregateParameter _AppCityId_W = null;
			private AggregateParameter _AppStateId_W = null;
			private AggregateParameter _AppCountryId_W = null;
			private AggregateParameter _AppPincode_W = null;
			private AggregateParameter _AppIsDefault_W = null;
			private AggregateParameter _AppName_W = null;
			private AggregateParameter _AppMobile_W = null;
			private AggregateParameter _AppEmail_W = null;

			public void AggregateClauseReset()
			{
				_AppAddressId_W = null;
				_AppCustomerID_W = null;
				_AppAddress_W = null;
				_AppCityId_W = null;
				_AppStateId_W = null;
				_AppCountryId_W = null;
				_AppPincode_W = null;
				_AppIsDefault_W = null;
				_AppName_W = null;
				_AppMobile_W = null;
				_AppEmail_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblAddressInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.AppAddressId.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblAddressUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblAddressDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.AppAddressId);
			p.SourceColumn = ColumnNames.AppAddressId;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.AppAddressId);
			p.SourceColumn = ColumnNames.AppAddressId;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppCustomerID);
			p.SourceColumn = ColumnNames.AppCustomerID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppAddress);
			p.SourceColumn = ColumnNames.AppAddress;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppCityId);
			p.SourceColumn = ColumnNames.AppCityId;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppStateId);
			p.SourceColumn = ColumnNames.AppStateId;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppCountryId);
			p.SourceColumn = ColumnNames.AppCountryId;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppPincode);
			p.SourceColumn = ColumnNames.AppPincode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppIsDefault);
			p.SourceColumn = ColumnNames.AppIsDefault;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppName);
			p.SourceColumn = ColumnNames.AppName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppMobile);
			p.SourceColumn = ColumnNames.AppMobile;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppEmail);
			p.SourceColumn = ColumnNames.AppEmail;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
