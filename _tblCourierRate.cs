
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace BusinessLayer
{
	public abstract class _tblCourierRate : SqlClientEntity
	{
		public _tblCourierRate()
		{
			this.QuerySource = "tblCourierRate";
			this.MappingName = "tblCourierRate";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblCourierRateLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int AppCourierRateID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.AppCourierRateID, AppCourierRateID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblCourierRateLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter AppCourierRateID
			{
				get
				{
					return new SqlParameter("@AppCourierRateID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AppMinWeight
			{
				get
				{
					return new SqlParameter("@AppMinWeight", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter AppMaxWeight
			{
				get
				{
					return new SqlParameter("@AppMaxWeight", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter AppRate
			{
				get
				{
					return new SqlParameter("@AppRate", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter AppCourierCompanyID
			{
				get
				{
					return new SqlParameter("@AppCourierCompanyID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AppPinCodeID
			{
				get
				{
					return new SqlParameter("@AppPinCodeID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AppIsCOD
			{
				get
				{
					return new SqlParameter("@AppIsCOD", SqlDbType.Bit, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string AppCourierRateID = "appCourierRateID";
            public const string AppMinWeight = "appMinWeight";
            public const string AppMaxWeight = "appMaxWeight";
            public const string AppRate = "appRate";
            public const string AppCourierCompanyID = "appCourierCompanyID";
            public const string AppPinCodeID = "appPinCodeID";
            public const string AppIsCOD = "appIsCOD";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[AppCourierRateID] = _tblCourierRate.PropertyNames.AppCourierRateID;
					ht[AppMinWeight] = _tblCourierRate.PropertyNames.AppMinWeight;
					ht[AppMaxWeight] = _tblCourierRate.PropertyNames.AppMaxWeight;
					ht[AppRate] = _tblCourierRate.PropertyNames.AppRate;
					ht[AppCourierCompanyID] = _tblCourierRate.PropertyNames.AppCourierCompanyID;
					ht[AppPinCodeID] = _tblCourierRate.PropertyNames.AppPinCodeID;
					ht[AppIsCOD] = _tblCourierRate.PropertyNames.AppIsCOD;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string AppCourierRateID = "AppCourierRateID";
            public const string AppMinWeight = "AppMinWeight";
            public const string AppMaxWeight = "AppMaxWeight";
            public const string AppRate = "AppRate";
            public const string AppCourierCompanyID = "AppCourierCompanyID";
            public const string AppPinCodeID = "AppPinCodeID";
            public const string AppIsCOD = "AppIsCOD";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[AppCourierRateID] = _tblCourierRate.ColumnNames.AppCourierRateID;
					ht[AppMinWeight] = _tblCourierRate.ColumnNames.AppMinWeight;
					ht[AppMaxWeight] = _tblCourierRate.ColumnNames.AppMaxWeight;
					ht[AppRate] = _tblCourierRate.ColumnNames.AppRate;
					ht[AppCourierCompanyID] = _tblCourierRate.ColumnNames.AppCourierCompanyID;
					ht[AppPinCodeID] = _tblCourierRate.ColumnNames.AppPinCodeID;
					ht[AppIsCOD] = _tblCourierRate.ColumnNames.AppIsCOD;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string AppCourierRateID = "s_AppCourierRateID";
            public const string AppMinWeight = "s_AppMinWeight";
            public const string AppMaxWeight = "s_AppMaxWeight";
            public const string AppRate = "s_AppRate";
            public const string AppCourierCompanyID = "s_AppCourierCompanyID";
            public const string AppPinCodeID = "s_AppPinCodeID";
            public const string AppIsCOD = "s_AppIsCOD";

		}
		#endregion		
		
		#region Properties
	
		public virtual int AppCourierRateID
	    {
			get
	        {
				return base.Getint(ColumnNames.AppCourierRateID);
			}
			set
	        {
				base.Setint(ColumnNames.AppCourierRateID, value);
			}
		}

		public virtual decimal AppMinWeight
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.AppMinWeight);
			}
			set
	        {
				base.Setdecimal(ColumnNames.AppMinWeight, value);
			}
		}

		public virtual decimal AppMaxWeight
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.AppMaxWeight);
			}
			set
	        {
				base.Setdecimal(ColumnNames.AppMaxWeight, value);
			}
		}

		public virtual decimal AppRate
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.AppRate);
			}
			set
	        {
				base.Setdecimal(ColumnNames.AppRate, value);
			}
		}

		public virtual int AppCourierCompanyID
	    {
			get
	        {
				return base.Getint(ColumnNames.AppCourierCompanyID);
			}
			set
	        {
				base.Setint(ColumnNames.AppCourierCompanyID, value);
			}
		}

		public virtual int AppPinCodeID
	    {
			get
	        {
				return base.Getint(ColumnNames.AppPinCodeID);
			}
			set
	        {
				base.Setint(ColumnNames.AppPinCodeID, value);
			}
		}

		public virtual bool AppIsCOD
	    {
			get
	        {
				return base.Getbool(ColumnNames.AppIsCOD);
			}
			set
	        {
				base.Setbool(ColumnNames.AppIsCOD, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_AppCourierRateID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppCourierRateID) ? string.Empty : base.GetintAsString(ColumnNames.AppCourierRateID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppCourierRateID);
				else
					this.AppCourierRateID = base.SetintAsString(ColumnNames.AppCourierRateID, value);
			}
		}

		public virtual string s_AppMinWeight
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppMinWeight) ? string.Empty : base.GetdecimalAsString(ColumnNames.AppMinWeight);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppMinWeight);
				else
					this.AppMinWeight = base.SetdecimalAsString(ColumnNames.AppMinWeight, value);
			}
		}

		public virtual string s_AppMaxWeight
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppMaxWeight) ? string.Empty : base.GetdecimalAsString(ColumnNames.AppMaxWeight);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppMaxWeight);
				else
					this.AppMaxWeight = base.SetdecimalAsString(ColumnNames.AppMaxWeight, value);
			}
		}

		public virtual string s_AppRate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppRate) ? string.Empty : base.GetdecimalAsString(ColumnNames.AppRate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppRate);
				else
					this.AppRate = base.SetdecimalAsString(ColumnNames.AppRate, value);
			}
		}

		public virtual string s_AppCourierCompanyID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppCourierCompanyID) ? string.Empty : base.GetintAsString(ColumnNames.AppCourierCompanyID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppCourierCompanyID);
				else
					this.AppCourierCompanyID = base.SetintAsString(ColumnNames.AppCourierCompanyID, value);
			}
		}

		public virtual string s_AppPinCodeID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppPinCodeID) ? string.Empty : base.GetintAsString(ColumnNames.AppPinCodeID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppPinCodeID);
				else
					this.AppPinCodeID = base.SetintAsString(ColumnNames.AppPinCodeID, value);
			}
		}

		public virtual string s_AppIsCOD
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppIsCOD) ? string.Empty : base.GetboolAsString(ColumnNames.AppIsCOD);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppIsCOD);
				else
					this.AppIsCOD = base.SetboolAsString(ColumnNames.AppIsCOD, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter AppCourierRateID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppCourierRateID, Parameters.AppCourierRateID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppMinWeight
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppMinWeight, Parameters.AppMinWeight);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppMaxWeight
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppMaxWeight, Parameters.AppMaxWeight);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppRate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppRate, Parameters.AppRate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppCourierCompanyID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppCourierCompanyID, Parameters.AppCourierCompanyID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppPinCodeID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppPinCodeID, Parameters.AppPinCodeID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppIsCOD
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppIsCOD, Parameters.AppIsCOD);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter AppCourierRateID
		    {
				get
		        {
					if(_AppCourierRateID_W == null)
	        	    {
						_AppCourierRateID_W = TearOff.AppCourierRateID;
					}
					return _AppCourierRateID_W;
				}
			}

			public WhereParameter AppMinWeight
		    {
				get
		        {
					if(_AppMinWeight_W == null)
	        	    {
						_AppMinWeight_W = TearOff.AppMinWeight;
					}
					return _AppMinWeight_W;
				}
			}

			public WhereParameter AppMaxWeight
		    {
				get
		        {
					if(_AppMaxWeight_W == null)
	        	    {
						_AppMaxWeight_W = TearOff.AppMaxWeight;
					}
					return _AppMaxWeight_W;
				}
			}

			public WhereParameter AppRate
		    {
				get
		        {
					if(_AppRate_W == null)
	        	    {
						_AppRate_W = TearOff.AppRate;
					}
					return _AppRate_W;
				}
			}

			public WhereParameter AppCourierCompanyID
		    {
				get
		        {
					if(_AppCourierCompanyID_W == null)
	        	    {
						_AppCourierCompanyID_W = TearOff.AppCourierCompanyID;
					}
					return _AppCourierCompanyID_W;
				}
			}

			public WhereParameter AppPinCodeID
		    {
				get
		        {
					if(_AppPinCodeID_W == null)
	        	    {
						_AppPinCodeID_W = TearOff.AppPinCodeID;
					}
					return _AppPinCodeID_W;
				}
			}

			public WhereParameter AppIsCOD
		    {
				get
		        {
					if(_AppIsCOD_W == null)
	        	    {
						_AppIsCOD_W = TearOff.AppIsCOD;
					}
					return _AppIsCOD_W;
				}
			}

			private WhereParameter _AppCourierRateID_W = null;
			private WhereParameter _AppMinWeight_W = null;
			private WhereParameter _AppMaxWeight_W = null;
			private WhereParameter _AppRate_W = null;
			private WhereParameter _AppCourierCompanyID_W = null;
			private WhereParameter _AppPinCodeID_W = null;
			private WhereParameter _AppIsCOD_W = null;

			public void WhereClauseReset()
			{
				_AppCourierRateID_W = null;
				_AppMinWeight_W = null;
				_AppMaxWeight_W = null;
				_AppRate_W = null;
				_AppCourierCompanyID_W = null;
				_AppPinCodeID_W = null;
				_AppIsCOD_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter AppCourierRateID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppCourierRateID, Parameters.AppCourierRateID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppMinWeight
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppMinWeight, Parameters.AppMinWeight);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppMaxWeight
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppMaxWeight, Parameters.AppMaxWeight);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppRate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppRate, Parameters.AppRate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppCourierCompanyID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppCourierCompanyID, Parameters.AppCourierCompanyID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppPinCodeID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppPinCodeID, Parameters.AppPinCodeID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppIsCOD
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppIsCOD, Parameters.AppIsCOD);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter AppCourierRateID
		    {
				get
		        {
					if(_AppCourierRateID_W == null)
	        	    {
						_AppCourierRateID_W = TearOff.AppCourierRateID;
					}
					return _AppCourierRateID_W;
				}
			}

			public AggregateParameter AppMinWeight
		    {
				get
		        {
					if(_AppMinWeight_W == null)
	        	    {
						_AppMinWeight_W = TearOff.AppMinWeight;
					}
					return _AppMinWeight_W;
				}
			}

			public AggregateParameter AppMaxWeight
		    {
				get
		        {
					if(_AppMaxWeight_W == null)
	        	    {
						_AppMaxWeight_W = TearOff.AppMaxWeight;
					}
					return _AppMaxWeight_W;
				}
			}

			public AggregateParameter AppRate
		    {
				get
		        {
					if(_AppRate_W == null)
	        	    {
						_AppRate_W = TearOff.AppRate;
					}
					return _AppRate_W;
				}
			}

			public AggregateParameter AppCourierCompanyID
		    {
				get
		        {
					if(_AppCourierCompanyID_W == null)
	        	    {
						_AppCourierCompanyID_W = TearOff.AppCourierCompanyID;
					}
					return _AppCourierCompanyID_W;
				}
			}

			public AggregateParameter AppPinCodeID
		    {
				get
		        {
					if(_AppPinCodeID_W == null)
	        	    {
						_AppPinCodeID_W = TearOff.AppPinCodeID;
					}
					return _AppPinCodeID_W;
				}
			}

			public AggregateParameter AppIsCOD
		    {
				get
		        {
					if(_AppIsCOD_W == null)
	        	    {
						_AppIsCOD_W = TearOff.AppIsCOD;
					}
					return _AppIsCOD_W;
				}
			}

			private AggregateParameter _AppCourierRateID_W = null;
			private AggregateParameter _AppMinWeight_W = null;
			private AggregateParameter _AppMaxWeight_W = null;
			private AggregateParameter _AppRate_W = null;
			private AggregateParameter _AppCourierCompanyID_W = null;
			private AggregateParameter _AppPinCodeID_W = null;
			private AggregateParameter _AppIsCOD_W = null;

			public void AggregateClauseReset()
			{
				_AppCourierRateID_W = null;
				_AppMinWeight_W = null;
				_AppMaxWeight_W = null;
				_AppRate_W = null;
				_AppCourierCompanyID_W = null;
				_AppPinCodeID_W = null;
				_AppIsCOD_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblCourierRateInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.AppCourierRateID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblCourierRateUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblCourierRateDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.AppCourierRateID);
			p.SourceColumn = ColumnNames.AppCourierRateID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.AppCourierRateID);
			p.SourceColumn = ColumnNames.AppCourierRateID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppMinWeight);
			p.SourceColumn = ColumnNames.AppMinWeight;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppMaxWeight);
			p.SourceColumn = ColumnNames.AppMaxWeight;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppRate);
			p.SourceColumn = ColumnNames.AppRate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppCourierCompanyID);
			p.SourceColumn = ColumnNames.AppCourierCompanyID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppPinCodeID);
			p.SourceColumn = ColumnNames.AppPinCodeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppIsCOD);
			p.SourceColumn = ColumnNames.AppIsCOD;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
