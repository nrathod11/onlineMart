
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace BusinessLayer
{
	public abstract class _tblPageFormat : SqlClientEntity
	{
		public _tblPageFormat()
		{
			this.QuerySource = "tblPageFormat";
			this.MappingName = "tblPageFormat";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblPageFormatLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int AppPageFormatId)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.AppPageFormatId, AppPageFormatId);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblPageFormatLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter AppPageFormatId
			{
				get
				{
					return new SqlParameter("@AppPageFormatId", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AppPageFormatName
			{
				get
				{
					return new SqlParameter("@AppPageFormatName", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter AppPageName
			{
				get
				{
					return new SqlParameter("@AppPageName", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter AppImage
			{
				get
				{
					return new SqlParameter("@AppImage", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter AppDescription
			{
				get
				{
					return new SqlParameter("@AppDescription", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter AppIsActive
			{
				get
				{
					return new SqlParameter("@AppIsActive", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AppCreatedDate
			{
				get
				{
					return new SqlParameter("@AppCreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter AppCreatedBy
			{
				get
				{
					return new SqlParameter("@AppCreatedBy", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string AppPageFormatId = "appPageFormatId";
            public const string AppPageFormatName = "appPageFormatName";
            public const string AppPageName = "appPageName";
            public const string AppImage = "appImage";
            public const string AppDescription = "appDescription";
            public const string AppIsActive = "appIsActive";
            public const string AppCreatedDate = "appCreatedDate";
            public const string AppCreatedBy = "appCreatedBy";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[AppPageFormatId] = _tblPageFormat.PropertyNames.AppPageFormatId;
					ht[AppPageFormatName] = _tblPageFormat.PropertyNames.AppPageFormatName;
					ht[AppPageName] = _tblPageFormat.PropertyNames.AppPageName;
					ht[AppImage] = _tblPageFormat.PropertyNames.AppImage;
					ht[AppDescription] = _tblPageFormat.PropertyNames.AppDescription;
					ht[AppIsActive] = _tblPageFormat.PropertyNames.AppIsActive;
					ht[AppCreatedDate] = _tblPageFormat.PropertyNames.AppCreatedDate;
					ht[AppCreatedBy] = _tblPageFormat.PropertyNames.AppCreatedBy;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string AppPageFormatId = "AppPageFormatId";
            public const string AppPageFormatName = "AppPageFormatName";
            public const string AppPageName = "AppPageName";
            public const string AppImage = "AppImage";
            public const string AppDescription = "AppDescription";
            public const string AppIsActive = "AppIsActive";
            public const string AppCreatedDate = "AppCreatedDate";
            public const string AppCreatedBy = "AppCreatedBy";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[AppPageFormatId] = _tblPageFormat.ColumnNames.AppPageFormatId;
					ht[AppPageFormatName] = _tblPageFormat.ColumnNames.AppPageFormatName;
					ht[AppPageName] = _tblPageFormat.ColumnNames.AppPageName;
					ht[AppImage] = _tblPageFormat.ColumnNames.AppImage;
					ht[AppDescription] = _tblPageFormat.ColumnNames.AppDescription;
					ht[AppIsActive] = _tblPageFormat.ColumnNames.AppIsActive;
					ht[AppCreatedDate] = _tblPageFormat.ColumnNames.AppCreatedDate;
					ht[AppCreatedBy] = _tblPageFormat.ColumnNames.AppCreatedBy;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string AppPageFormatId = "s_AppPageFormatId";
            public const string AppPageFormatName = "s_AppPageFormatName";
            public const string AppPageName = "s_AppPageName";
            public const string AppImage = "s_AppImage";
            public const string AppDescription = "s_AppDescription";
            public const string AppIsActive = "s_AppIsActive";
            public const string AppCreatedDate = "s_AppCreatedDate";
            public const string AppCreatedBy = "s_AppCreatedBy";

		}
		#endregion		
		
		#region Properties
	
		public virtual int AppPageFormatId
	    {
			get
	        {
				return base.Getint(ColumnNames.AppPageFormatId);
			}
			set
	        {
				base.Setint(ColumnNames.AppPageFormatId, value);
			}
		}

		public virtual string AppPageFormatName
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppPageFormatName);
			}
			set
	        {
				base.Setstring(ColumnNames.AppPageFormatName, value);
			}
		}

		public virtual string AppPageName
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppPageName);
			}
			set
	        {
				base.Setstring(ColumnNames.AppPageName, value);
			}
		}

		public virtual string AppImage
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppImage);
			}
			set
	        {
				base.Setstring(ColumnNames.AppImage, value);
			}
		}

		public virtual string AppDescription
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppDescription);
			}
			set
	        {
				base.Setstring(ColumnNames.AppDescription, value);
			}
		}

		public virtual bool AppIsActive
	    {
			get
	        {
				return base.Getbool(ColumnNames.AppIsActive);
			}
			set
	        {
				base.Setbool(ColumnNames.AppIsActive, value);
			}
		}

		public virtual DateTime AppCreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.AppCreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.AppCreatedDate, value);
			}
		}

		public virtual int AppCreatedBy
	    {
			get
	        {
				return base.Getint(ColumnNames.AppCreatedBy);
			}
			set
	        {
				base.Setint(ColumnNames.AppCreatedBy, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_AppPageFormatId
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppPageFormatId) ? string.Empty : base.GetintAsString(ColumnNames.AppPageFormatId);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppPageFormatId);
				else
					this.AppPageFormatId = base.SetintAsString(ColumnNames.AppPageFormatId, value);
			}
		}

		public virtual string s_AppPageFormatName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppPageFormatName) ? string.Empty : base.GetstringAsString(ColumnNames.AppPageFormatName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppPageFormatName);
				else
					this.AppPageFormatName = base.SetstringAsString(ColumnNames.AppPageFormatName, value);
			}
		}

		public virtual string s_AppPageName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppPageName) ? string.Empty : base.GetstringAsString(ColumnNames.AppPageName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppPageName);
				else
					this.AppPageName = base.SetstringAsString(ColumnNames.AppPageName, value);
			}
		}

		public virtual string s_AppImage
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppImage) ? string.Empty : base.GetstringAsString(ColumnNames.AppImage);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppImage);
				else
					this.AppImage = base.SetstringAsString(ColumnNames.AppImage, value);
			}
		}

		public virtual string s_AppDescription
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppDescription) ? string.Empty : base.GetstringAsString(ColumnNames.AppDescription);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppDescription);
				else
					this.AppDescription = base.SetstringAsString(ColumnNames.AppDescription, value);
			}
		}

		public virtual string s_AppIsActive
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppIsActive) ? string.Empty : base.GetboolAsString(ColumnNames.AppIsActive);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppIsActive);
				else
					this.AppIsActive = base.SetboolAsString(ColumnNames.AppIsActive, value);
			}
		}

		public virtual string s_AppCreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppCreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.AppCreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppCreatedDate);
				else
					this.AppCreatedDate = base.SetDateTimeAsString(ColumnNames.AppCreatedDate, value);
			}
		}

		public virtual string s_AppCreatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppCreatedBy) ? string.Empty : base.GetintAsString(ColumnNames.AppCreatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppCreatedBy);
				else
					this.AppCreatedBy = base.SetintAsString(ColumnNames.AppCreatedBy, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter AppPageFormatId
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppPageFormatId, Parameters.AppPageFormatId);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppPageFormatName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppPageFormatName, Parameters.AppPageFormatName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppPageName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppPageName, Parameters.AppPageName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppImage
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppImage, Parameters.AppImage);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppDescription
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppDescription, Parameters.AppDescription);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppIsActive
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppIsActive, Parameters.AppIsActive);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppCreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppCreatedDate, Parameters.AppCreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppCreatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppCreatedBy, Parameters.AppCreatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter AppPageFormatId
		    {
				get
		        {
					if(_AppPageFormatId_W == null)
	        	    {
						_AppPageFormatId_W = TearOff.AppPageFormatId;
					}
					return _AppPageFormatId_W;
				}
			}

			public WhereParameter AppPageFormatName
		    {
				get
		        {
					if(_AppPageFormatName_W == null)
	        	    {
						_AppPageFormatName_W = TearOff.AppPageFormatName;
					}
					return _AppPageFormatName_W;
				}
			}

			public WhereParameter AppPageName
		    {
				get
		        {
					if(_AppPageName_W == null)
	        	    {
						_AppPageName_W = TearOff.AppPageName;
					}
					return _AppPageName_W;
				}
			}

			public WhereParameter AppImage
		    {
				get
		        {
					if(_AppImage_W == null)
	        	    {
						_AppImage_W = TearOff.AppImage;
					}
					return _AppImage_W;
				}
			}

			public WhereParameter AppDescription
		    {
				get
		        {
					if(_AppDescription_W == null)
	        	    {
						_AppDescription_W = TearOff.AppDescription;
					}
					return _AppDescription_W;
				}
			}

			public WhereParameter AppIsActive
		    {
				get
		        {
					if(_AppIsActive_W == null)
	        	    {
						_AppIsActive_W = TearOff.AppIsActive;
					}
					return _AppIsActive_W;
				}
			}

			public WhereParameter AppCreatedDate
		    {
				get
		        {
					if(_AppCreatedDate_W == null)
	        	    {
						_AppCreatedDate_W = TearOff.AppCreatedDate;
					}
					return _AppCreatedDate_W;
				}
			}

			public WhereParameter AppCreatedBy
		    {
				get
		        {
					if(_AppCreatedBy_W == null)
	        	    {
						_AppCreatedBy_W = TearOff.AppCreatedBy;
					}
					return _AppCreatedBy_W;
				}
			}

			private WhereParameter _AppPageFormatId_W = null;
			private WhereParameter _AppPageFormatName_W = null;
			private WhereParameter _AppPageName_W = null;
			private WhereParameter _AppImage_W = null;
			private WhereParameter _AppDescription_W = null;
			private WhereParameter _AppIsActive_W = null;
			private WhereParameter _AppCreatedDate_W = null;
			private WhereParameter _AppCreatedBy_W = null;

			public void WhereClauseReset()
			{
				_AppPageFormatId_W = null;
				_AppPageFormatName_W = null;
				_AppPageName_W = null;
				_AppImage_W = null;
				_AppDescription_W = null;
				_AppIsActive_W = null;
				_AppCreatedDate_W = null;
				_AppCreatedBy_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter AppPageFormatId
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppPageFormatId, Parameters.AppPageFormatId);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppPageFormatName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppPageFormatName, Parameters.AppPageFormatName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppPageName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppPageName, Parameters.AppPageName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppImage
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppImage, Parameters.AppImage);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppDescription
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppDescription, Parameters.AppDescription);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppIsActive
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppIsActive, Parameters.AppIsActive);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppCreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppCreatedDate, Parameters.AppCreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppCreatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppCreatedBy, Parameters.AppCreatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter AppPageFormatId
		    {
				get
		        {
					if(_AppPageFormatId_W == null)
	        	    {
						_AppPageFormatId_W = TearOff.AppPageFormatId;
					}
					return _AppPageFormatId_W;
				}
			}

			public AggregateParameter AppPageFormatName
		    {
				get
		        {
					if(_AppPageFormatName_W == null)
	        	    {
						_AppPageFormatName_W = TearOff.AppPageFormatName;
					}
					return _AppPageFormatName_W;
				}
			}

			public AggregateParameter AppPageName
		    {
				get
		        {
					if(_AppPageName_W == null)
	        	    {
						_AppPageName_W = TearOff.AppPageName;
					}
					return _AppPageName_W;
				}
			}

			public AggregateParameter AppImage
		    {
				get
		        {
					if(_AppImage_W == null)
	        	    {
						_AppImage_W = TearOff.AppImage;
					}
					return _AppImage_W;
				}
			}

			public AggregateParameter AppDescription
		    {
				get
		        {
					if(_AppDescription_W == null)
	        	    {
						_AppDescription_W = TearOff.AppDescription;
					}
					return _AppDescription_W;
				}
			}

			public AggregateParameter AppIsActive
		    {
				get
		        {
					if(_AppIsActive_W == null)
	        	    {
						_AppIsActive_W = TearOff.AppIsActive;
					}
					return _AppIsActive_W;
				}
			}

			public AggregateParameter AppCreatedDate
		    {
				get
		        {
					if(_AppCreatedDate_W == null)
	        	    {
						_AppCreatedDate_W = TearOff.AppCreatedDate;
					}
					return _AppCreatedDate_W;
				}
			}

			public AggregateParameter AppCreatedBy
		    {
				get
		        {
					if(_AppCreatedBy_W == null)
	        	    {
						_AppCreatedBy_W = TearOff.AppCreatedBy;
					}
					return _AppCreatedBy_W;
				}
			}

			private AggregateParameter _AppPageFormatId_W = null;
			private AggregateParameter _AppPageFormatName_W = null;
			private AggregateParameter _AppPageName_W = null;
			private AggregateParameter _AppImage_W = null;
			private AggregateParameter _AppDescription_W = null;
			private AggregateParameter _AppIsActive_W = null;
			private AggregateParameter _AppCreatedDate_W = null;
			private AggregateParameter _AppCreatedBy_W = null;

			public void AggregateClauseReset()
			{
				_AppPageFormatId_W = null;
				_AppPageFormatName_W = null;
				_AppPageName_W = null;
				_AppImage_W = null;
				_AppDescription_W = null;
				_AppIsActive_W = null;
				_AppCreatedDate_W = null;
				_AppCreatedBy_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblPageFormatInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.AppPageFormatId.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblPageFormatUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblPageFormatDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.AppPageFormatId);
			p.SourceColumn = ColumnNames.AppPageFormatId;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.AppPageFormatId);
			p.SourceColumn = ColumnNames.AppPageFormatId;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppPageFormatName);
			p.SourceColumn = ColumnNames.AppPageFormatName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppPageName);
			p.SourceColumn = ColumnNames.AppPageName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppImage);
			p.SourceColumn = ColumnNames.AppImage;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppDescription);
			p.SourceColumn = ColumnNames.AppDescription;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppIsActive);
			p.SourceColumn = ColumnNames.AppIsActive;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppCreatedDate);
			p.SourceColumn = ColumnNames.AppCreatedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppCreatedBy);
			p.SourceColumn = ColumnNames.AppCreatedBy;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
