
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace BusinessLayer
{
	public abstract class _tblCustomer : SqlClientEntity
	{
		public _tblCustomer()
		{
			this.QuerySource = "tblCustomer";
			this.MappingName = "tblCustomer";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblCustomerLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int AppCustomerID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.AppCustomerID, AppCustomerID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblCustomerLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter AppCustomerID
			{
				get
				{
					return new SqlParameter("@AppCustomerID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AppFirstName
			{
				get
				{
					return new SqlParameter("@AppFirstName", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter AppLastName
			{
				get
				{
					return new SqlParameter("@AppLastName", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter AppEmailID
			{
				get
				{
					return new SqlParameter("@AppEmailID", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter AppPassword
			{
				get
				{
					return new SqlParameter("@AppPassword", SqlDbType.VarChar, 150);
				}
			}
			
			public static SqlParameter AppMobile
			{
				get
				{
					return new SqlParameter("@AppMobile", SqlDbType.VarChar, 20);
				}
			}
			
			public static SqlParameter AppPhone
			{
				get
				{
					return new SqlParameter("@AppPhone", SqlDbType.VarChar, 20);
				}
			}
			
			public static SqlParameter AppGender
			{
				get
				{
					return new SqlParameter("@AppGender", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AppPincode
			{
				get
				{
					return new SqlParameter("@AppPincode", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter AppIsVerified
			{
				get
				{
					return new SqlParameter("@AppIsVerified", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AppImage
			{
				get
				{
					return new SqlParameter("@AppImage", SqlDbType.VarChar, 250);
				}
			}
			
			public static SqlParameter AppIsActive
			{
				get
				{
					return new SqlParameter("@AppIsActive", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AppIsNewsLetter
			{
				get
				{
					return new SqlParameter("@AppIsNewsLetter", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AppAddress
			{
				get
				{
					return new SqlParameter("@AppAddress", SqlDbType.VarChar, 500);
				}
			}
			
			public static SqlParameter AppCreatedDate
			{
				get
				{
					return new SqlParameter("@AppCreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter AppStateId
			{
				get
				{
					return new SqlParameter("@AppStateId", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AppCountryId
			{
				get
				{
					return new SqlParameter("@AppCountryId", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AppCityId
			{
				get
				{
					return new SqlParameter("@AppCityId", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string AppCustomerID = "appCustomerID";
            public const string AppFirstName = "appFirstName";
            public const string AppLastName = "appLastName";
            public const string AppEmailID = "appEmailID";
            public const string AppPassword = "appPassword";
            public const string AppMobile = "appMobile";
            public const string AppPhone = "appPhone";
            public const string AppGender = "appGender";
            public const string AppPincode = "appPincode";
            public const string AppIsVerified = "appIsVerified";
            public const string AppImage = "appImage";
            public const string AppIsActive = "appIsActive";
            public const string AppIsNewsLetter = "appIsNewsLetter";
            public const string AppAddress = "appAddress";
            public const string AppCreatedDate = "appCreatedDate";
            public const string AppStateId = "appStateId";
            public const string AppCountryId = "appCountryId";
            public const string AppCityId = "appCityId";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[AppCustomerID] = _tblCustomer.PropertyNames.AppCustomerID;
					ht[AppFirstName] = _tblCustomer.PropertyNames.AppFirstName;
					ht[AppLastName] = _tblCustomer.PropertyNames.AppLastName;
					ht[AppEmailID] = _tblCustomer.PropertyNames.AppEmailID;
					ht[AppPassword] = _tblCustomer.PropertyNames.AppPassword;
					ht[AppMobile] = _tblCustomer.PropertyNames.AppMobile;
					ht[AppPhone] = _tblCustomer.PropertyNames.AppPhone;
					ht[AppGender] = _tblCustomer.PropertyNames.AppGender;
					ht[AppPincode] = _tblCustomer.PropertyNames.AppPincode;
					ht[AppIsVerified] = _tblCustomer.PropertyNames.AppIsVerified;
					ht[AppImage] = _tblCustomer.PropertyNames.AppImage;
					ht[AppIsActive] = _tblCustomer.PropertyNames.AppIsActive;
					ht[AppIsNewsLetter] = _tblCustomer.PropertyNames.AppIsNewsLetter;
					ht[AppAddress] = _tblCustomer.PropertyNames.AppAddress;
					ht[AppCreatedDate] = _tblCustomer.PropertyNames.AppCreatedDate;
					ht[AppStateId] = _tblCustomer.PropertyNames.AppStateId;
					ht[AppCountryId] = _tblCustomer.PropertyNames.AppCountryId;
					ht[AppCityId] = _tblCustomer.PropertyNames.AppCityId;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string AppCustomerID = "AppCustomerID";
            public const string AppFirstName = "AppFirstName";
            public const string AppLastName = "AppLastName";
            public const string AppEmailID = "AppEmailID";
            public const string AppPassword = "AppPassword";
            public const string AppMobile = "AppMobile";
            public const string AppPhone = "AppPhone";
            public const string AppGender = "AppGender";
            public const string AppPincode = "AppPincode";
            public const string AppIsVerified = "AppIsVerified";
            public const string AppImage = "AppImage";
            public const string AppIsActive = "AppIsActive";
            public const string AppIsNewsLetter = "AppIsNewsLetter";
            public const string AppAddress = "AppAddress";
            public const string AppCreatedDate = "AppCreatedDate";
            public const string AppStateId = "AppStateId";
            public const string AppCountryId = "AppCountryId";
            public const string AppCityId = "AppCityId";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[AppCustomerID] = _tblCustomer.ColumnNames.AppCustomerID;
					ht[AppFirstName] = _tblCustomer.ColumnNames.AppFirstName;
					ht[AppLastName] = _tblCustomer.ColumnNames.AppLastName;
					ht[AppEmailID] = _tblCustomer.ColumnNames.AppEmailID;
					ht[AppPassword] = _tblCustomer.ColumnNames.AppPassword;
					ht[AppMobile] = _tblCustomer.ColumnNames.AppMobile;
					ht[AppPhone] = _tblCustomer.ColumnNames.AppPhone;
					ht[AppGender] = _tblCustomer.ColumnNames.AppGender;
					ht[AppPincode] = _tblCustomer.ColumnNames.AppPincode;
					ht[AppIsVerified] = _tblCustomer.ColumnNames.AppIsVerified;
					ht[AppImage] = _tblCustomer.ColumnNames.AppImage;
					ht[AppIsActive] = _tblCustomer.ColumnNames.AppIsActive;
					ht[AppIsNewsLetter] = _tblCustomer.ColumnNames.AppIsNewsLetter;
					ht[AppAddress] = _tblCustomer.ColumnNames.AppAddress;
					ht[AppCreatedDate] = _tblCustomer.ColumnNames.AppCreatedDate;
					ht[AppStateId] = _tblCustomer.ColumnNames.AppStateId;
					ht[AppCountryId] = _tblCustomer.ColumnNames.AppCountryId;
					ht[AppCityId] = _tblCustomer.ColumnNames.AppCityId;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string AppCustomerID = "s_AppCustomerID";
            public const string AppFirstName = "s_AppFirstName";
            public const string AppLastName = "s_AppLastName";
            public const string AppEmailID = "s_AppEmailID";
            public const string AppPassword = "s_AppPassword";
            public const string AppMobile = "s_AppMobile";
            public const string AppPhone = "s_AppPhone";
            public const string AppGender = "s_AppGender";
            public const string AppPincode = "s_AppPincode";
            public const string AppIsVerified = "s_AppIsVerified";
            public const string AppImage = "s_AppImage";
            public const string AppIsActive = "s_AppIsActive";
            public const string AppIsNewsLetter = "s_AppIsNewsLetter";
            public const string AppAddress = "s_AppAddress";
            public const string AppCreatedDate = "s_AppCreatedDate";
            public const string AppStateId = "s_AppStateId";
            public const string AppCountryId = "s_AppCountryId";
            public const string AppCityId = "s_AppCityId";

		}
		#endregion		
		
		#region Properties
	
		public virtual int AppCustomerID
	    {
			get
	        {
				return base.Getint(ColumnNames.AppCustomerID);
			}
			set
	        {
				base.Setint(ColumnNames.AppCustomerID, value);
			}
		}

		public virtual string AppFirstName
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppFirstName);
			}
			set
	        {
				base.Setstring(ColumnNames.AppFirstName, value);
			}
		}

		public virtual string AppLastName
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppLastName);
			}
			set
	        {
				base.Setstring(ColumnNames.AppLastName, value);
			}
		}

		public virtual string AppEmailID
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppEmailID);
			}
			set
	        {
				base.Setstring(ColumnNames.AppEmailID, value);
			}
		}

		public virtual string AppPassword
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppPassword);
			}
			set
	        {
				base.Setstring(ColumnNames.AppPassword, value);
			}
		}

		public virtual string AppMobile
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppMobile);
			}
			set
	        {
				base.Setstring(ColumnNames.AppMobile, value);
			}
		}

		public virtual string AppPhone
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppPhone);
			}
			set
	        {
				base.Setstring(ColumnNames.AppPhone, value);
			}
		}

		public virtual bool AppGender
	    {
			get
	        {
				return base.Getbool(ColumnNames.AppGender);
			}
			set
	        {
				base.Setbool(ColumnNames.AppGender, value);
			}
		}

		public virtual string AppPincode
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppPincode);
			}
			set
	        {
				base.Setstring(ColumnNames.AppPincode, value);
			}
		}

		public virtual bool AppIsVerified
	    {
			get
	        {
				return base.Getbool(ColumnNames.AppIsVerified);
			}
			set
	        {
				base.Setbool(ColumnNames.AppIsVerified, value);
			}
		}

		public virtual string AppImage
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppImage);
			}
			set
	        {
				base.Setstring(ColumnNames.AppImage, value);
			}
		}

		public virtual bool AppIsActive
	    {
			get
	        {
				return base.Getbool(ColumnNames.AppIsActive);
			}
			set
	        {
				base.Setbool(ColumnNames.AppIsActive, value);
			}
		}

		public virtual bool AppIsNewsLetter
	    {
			get
	        {
				return base.Getbool(ColumnNames.AppIsNewsLetter);
			}
			set
	        {
				base.Setbool(ColumnNames.AppIsNewsLetter, value);
			}
		}

		public virtual string AppAddress
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppAddress);
			}
			set
	        {
				base.Setstring(ColumnNames.AppAddress, value);
			}
		}

		public virtual DateTime AppCreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.AppCreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.AppCreatedDate, value);
			}
		}

		public virtual int AppStateId
	    {
			get
	        {
				return base.Getint(ColumnNames.AppStateId);
			}
			set
	        {
				base.Setint(ColumnNames.AppStateId, value);
			}
		}

		public virtual int AppCountryId
	    {
			get
	        {
				return base.Getint(ColumnNames.AppCountryId);
			}
			set
	        {
				base.Setint(ColumnNames.AppCountryId, value);
			}
		}

		public virtual int AppCityId
	    {
			get
	        {
				return base.Getint(ColumnNames.AppCityId);
			}
			set
	        {
				base.Setint(ColumnNames.AppCityId, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_AppCustomerID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppCustomerID) ? string.Empty : base.GetintAsString(ColumnNames.AppCustomerID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppCustomerID);
				else
					this.AppCustomerID = base.SetintAsString(ColumnNames.AppCustomerID, value);
			}
		}

		public virtual string s_AppFirstName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppFirstName) ? string.Empty : base.GetstringAsString(ColumnNames.AppFirstName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppFirstName);
				else
					this.AppFirstName = base.SetstringAsString(ColumnNames.AppFirstName, value);
			}
		}

		public virtual string s_AppLastName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppLastName) ? string.Empty : base.GetstringAsString(ColumnNames.AppLastName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppLastName);
				else
					this.AppLastName = base.SetstringAsString(ColumnNames.AppLastName, value);
			}
		}

		public virtual string s_AppEmailID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppEmailID) ? string.Empty : base.GetstringAsString(ColumnNames.AppEmailID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppEmailID);
				else
					this.AppEmailID = base.SetstringAsString(ColumnNames.AppEmailID, value);
			}
		}

		public virtual string s_AppPassword
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppPassword) ? string.Empty : base.GetstringAsString(ColumnNames.AppPassword);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppPassword);
				else
					this.AppPassword = base.SetstringAsString(ColumnNames.AppPassword, value);
			}
		}

		public virtual string s_AppMobile
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppMobile) ? string.Empty : base.GetstringAsString(ColumnNames.AppMobile);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppMobile);
				else
					this.AppMobile = base.SetstringAsString(ColumnNames.AppMobile, value);
			}
		}

		public virtual string s_AppPhone
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppPhone) ? string.Empty : base.GetstringAsString(ColumnNames.AppPhone);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppPhone);
				else
					this.AppPhone = base.SetstringAsString(ColumnNames.AppPhone, value);
			}
		}

		public virtual string s_AppGender
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppGender) ? string.Empty : base.GetboolAsString(ColumnNames.AppGender);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppGender);
				else
					this.AppGender = base.SetboolAsString(ColumnNames.AppGender, value);
			}
		}

		public virtual string s_AppPincode
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppPincode) ? string.Empty : base.GetstringAsString(ColumnNames.AppPincode);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppPincode);
				else
					this.AppPincode = base.SetstringAsString(ColumnNames.AppPincode, value);
			}
		}

		public virtual string s_AppIsVerified
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppIsVerified) ? string.Empty : base.GetboolAsString(ColumnNames.AppIsVerified);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppIsVerified);
				else
					this.AppIsVerified = base.SetboolAsString(ColumnNames.AppIsVerified, value);
			}
		}

		public virtual string s_AppImage
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppImage) ? string.Empty : base.GetstringAsString(ColumnNames.AppImage);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppImage);
				else
					this.AppImage = base.SetstringAsString(ColumnNames.AppImage, value);
			}
		}

		public virtual string s_AppIsActive
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppIsActive) ? string.Empty : base.GetboolAsString(ColumnNames.AppIsActive);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppIsActive);
				else
					this.AppIsActive = base.SetboolAsString(ColumnNames.AppIsActive, value);
			}
		}

		public virtual string s_AppIsNewsLetter
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppIsNewsLetter) ? string.Empty : base.GetboolAsString(ColumnNames.AppIsNewsLetter);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppIsNewsLetter);
				else
					this.AppIsNewsLetter = base.SetboolAsString(ColumnNames.AppIsNewsLetter, value);
			}
		}

		public virtual string s_AppAddress
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppAddress) ? string.Empty : base.GetstringAsString(ColumnNames.AppAddress);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppAddress);
				else
					this.AppAddress = base.SetstringAsString(ColumnNames.AppAddress, value);
			}
		}

		public virtual string s_AppCreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppCreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.AppCreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppCreatedDate);
				else
					this.AppCreatedDate = base.SetDateTimeAsString(ColumnNames.AppCreatedDate, value);
			}
		}

		public virtual string s_AppStateId
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppStateId) ? string.Empty : base.GetintAsString(ColumnNames.AppStateId);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppStateId);
				else
					this.AppStateId = base.SetintAsString(ColumnNames.AppStateId, value);
			}
		}

		public virtual string s_AppCountryId
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppCountryId) ? string.Empty : base.GetintAsString(ColumnNames.AppCountryId);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppCountryId);
				else
					this.AppCountryId = base.SetintAsString(ColumnNames.AppCountryId, value);
			}
		}

		public virtual string s_AppCityId
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppCityId) ? string.Empty : base.GetintAsString(ColumnNames.AppCityId);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppCityId);
				else
					this.AppCityId = base.SetintAsString(ColumnNames.AppCityId, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter AppCustomerID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppCustomerID, Parameters.AppCustomerID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppFirstName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppFirstName, Parameters.AppFirstName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppLastName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppLastName, Parameters.AppLastName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppEmailID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppEmailID, Parameters.AppEmailID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppPassword
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppPassword, Parameters.AppPassword);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppMobile
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppMobile, Parameters.AppMobile);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppPhone
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppPhone, Parameters.AppPhone);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppGender
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppGender, Parameters.AppGender);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppPincode
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppPincode, Parameters.AppPincode);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppIsVerified
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppIsVerified, Parameters.AppIsVerified);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppImage
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppImage, Parameters.AppImage);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppIsActive
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppIsActive, Parameters.AppIsActive);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppIsNewsLetter
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppIsNewsLetter, Parameters.AppIsNewsLetter);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppAddress
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppAddress, Parameters.AppAddress);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppCreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppCreatedDate, Parameters.AppCreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppStateId
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppStateId, Parameters.AppStateId);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppCountryId
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppCountryId, Parameters.AppCountryId);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppCityId
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppCityId, Parameters.AppCityId);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter AppCustomerID
		    {
				get
		        {
					if(_AppCustomerID_W == null)
	        	    {
						_AppCustomerID_W = TearOff.AppCustomerID;
					}
					return _AppCustomerID_W;
				}
			}

			public WhereParameter AppFirstName
		    {
				get
		        {
					if(_AppFirstName_W == null)
	        	    {
						_AppFirstName_W = TearOff.AppFirstName;
					}
					return _AppFirstName_W;
				}
			}

			public WhereParameter AppLastName
		    {
				get
		        {
					if(_AppLastName_W == null)
	        	    {
						_AppLastName_W = TearOff.AppLastName;
					}
					return _AppLastName_W;
				}
			}

			public WhereParameter AppEmailID
		    {
				get
		        {
					if(_AppEmailID_W == null)
	        	    {
						_AppEmailID_W = TearOff.AppEmailID;
					}
					return _AppEmailID_W;
				}
			}

			public WhereParameter AppPassword
		    {
				get
		        {
					if(_AppPassword_W == null)
	        	    {
						_AppPassword_W = TearOff.AppPassword;
					}
					return _AppPassword_W;
				}
			}

			public WhereParameter AppMobile
		    {
				get
		        {
					if(_AppMobile_W == null)
	        	    {
						_AppMobile_W = TearOff.AppMobile;
					}
					return _AppMobile_W;
				}
			}

			public WhereParameter AppPhone
		    {
				get
		        {
					if(_AppPhone_W == null)
	        	    {
						_AppPhone_W = TearOff.AppPhone;
					}
					return _AppPhone_W;
				}
			}

			public WhereParameter AppGender
		    {
				get
		        {
					if(_AppGender_W == null)
	        	    {
						_AppGender_W = TearOff.AppGender;
					}
					return _AppGender_W;
				}
			}

			public WhereParameter AppPincode
		    {
				get
		        {
					if(_AppPincode_W == null)
	        	    {
						_AppPincode_W = TearOff.AppPincode;
					}
					return _AppPincode_W;
				}
			}

			public WhereParameter AppIsVerified
		    {
				get
		        {
					if(_AppIsVerified_W == null)
	        	    {
						_AppIsVerified_W = TearOff.AppIsVerified;
					}
					return _AppIsVerified_W;
				}
			}

			public WhereParameter AppImage
		    {
				get
		        {
					if(_AppImage_W == null)
	        	    {
						_AppImage_W = TearOff.AppImage;
					}
					return _AppImage_W;
				}
			}

			public WhereParameter AppIsActive
		    {
				get
		        {
					if(_AppIsActive_W == null)
	        	    {
						_AppIsActive_W = TearOff.AppIsActive;
					}
					return _AppIsActive_W;
				}
			}

			public WhereParameter AppIsNewsLetter
		    {
				get
		        {
					if(_AppIsNewsLetter_W == null)
	        	    {
						_AppIsNewsLetter_W = TearOff.AppIsNewsLetter;
					}
					return _AppIsNewsLetter_W;
				}
			}

			public WhereParameter AppAddress
		    {
				get
		        {
					if(_AppAddress_W == null)
	        	    {
						_AppAddress_W = TearOff.AppAddress;
					}
					return _AppAddress_W;
				}
			}

			public WhereParameter AppCreatedDate
		    {
				get
		        {
					if(_AppCreatedDate_W == null)
	        	    {
						_AppCreatedDate_W = TearOff.AppCreatedDate;
					}
					return _AppCreatedDate_W;
				}
			}

			public WhereParameter AppStateId
		    {
				get
		        {
					if(_AppStateId_W == null)
	        	    {
						_AppStateId_W = TearOff.AppStateId;
					}
					return _AppStateId_W;
				}
			}

			public WhereParameter AppCountryId
		    {
				get
		        {
					if(_AppCountryId_W == null)
	        	    {
						_AppCountryId_W = TearOff.AppCountryId;
					}
					return _AppCountryId_W;
				}
			}

			public WhereParameter AppCityId
		    {
				get
		        {
					if(_AppCityId_W == null)
	        	    {
						_AppCityId_W = TearOff.AppCityId;
					}
					return _AppCityId_W;
				}
			}

			private WhereParameter _AppCustomerID_W = null;
			private WhereParameter _AppFirstName_W = null;
			private WhereParameter _AppLastName_W = null;
			private WhereParameter _AppEmailID_W = null;
			private WhereParameter _AppPassword_W = null;
			private WhereParameter _AppMobile_W = null;
			private WhereParameter _AppPhone_W = null;
			private WhereParameter _AppGender_W = null;
			private WhereParameter _AppPincode_W = null;
			private WhereParameter _AppIsVerified_W = null;
			private WhereParameter _AppImage_W = null;
			private WhereParameter _AppIsActive_W = null;
			private WhereParameter _AppIsNewsLetter_W = null;
			private WhereParameter _AppAddress_W = null;
			private WhereParameter _AppCreatedDate_W = null;
			private WhereParameter _AppStateId_W = null;
			private WhereParameter _AppCountryId_W = null;
			private WhereParameter _AppCityId_W = null;

			public void WhereClauseReset()
			{
				_AppCustomerID_W = null;
				_AppFirstName_W = null;
				_AppLastName_W = null;
				_AppEmailID_W = null;
				_AppPassword_W = null;
				_AppMobile_W = null;
				_AppPhone_W = null;
				_AppGender_W = null;
				_AppPincode_W = null;
				_AppIsVerified_W = null;
				_AppImage_W = null;
				_AppIsActive_W = null;
				_AppIsNewsLetter_W = null;
				_AppAddress_W = null;
				_AppCreatedDate_W = null;
				_AppStateId_W = null;
				_AppCountryId_W = null;
				_AppCityId_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter AppCustomerID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppCustomerID, Parameters.AppCustomerID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppFirstName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppFirstName, Parameters.AppFirstName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppLastName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppLastName, Parameters.AppLastName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppEmailID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppEmailID, Parameters.AppEmailID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppPassword
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppPassword, Parameters.AppPassword);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppMobile
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppMobile, Parameters.AppMobile);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppPhone
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppPhone, Parameters.AppPhone);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppGender
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppGender, Parameters.AppGender);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppPincode
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppPincode, Parameters.AppPincode);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppIsVerified
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppIsVerified, Parameters.AppIsVerified);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppImage
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppImage, Parameters.AppImage);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppIsActive
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppIsActive, Parameters.AppIsActive);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppIsNewsLetter
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppIsNewsLetter, Parameters.AppIsNewsLetter);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppAddress
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppAddress, Parameters.AppAddress);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppCreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppCreatedDate, Parameters.AppCreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppStateId
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppStateId, Parameters.AppStateId);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppCountryId
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppCountryId, Parameters.AppCountryId);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppCityId
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppCityId, Parameters.AppCityId);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter AppCustomerID
		    {
				get
		        {
					if(_AppCustomerID_W == null)
	        	    {
						_AppCustomerID_W = TearOff.AppCustomerID;
					}
					return _AppCustomerID_W;
				}
			}

			public AggregateParameter AppFirstName
		    {
				get
		        {
					if(_AppFirstName_W == null)
	        	    {
						_AppFirstName_W = TearOff.AppFirstName;
					}
					return _AppFirstName_W;
				}
			}

			public AggregateParameter AppLastName
		    {
				get
		        {
					if(_AppLastName_W == null)
	        	    {
						_AppLastName_W = TearOff.AppLastName;
					}
					return _AppLastName_W;
				}
			}

			public AggregateParameter AppEmailID
		    {
				get
		        {
					if(_AppEmailID_W == null)
	        	    {
						_AppEmailID_W = TearOff.AppEmailID;
					}
					return _AppEmailID_W;
				}
			}

			public AggregateParameter AppPassword
		    {
				get
		        {
					if(_AppPassword_W == null)
	        	    {
						_AppPassword_W = TearOff.AppPassword;
					}
					return _AppPassword_W;
				}
			}

			public AggregateParameter AppMobile
		    {
				get
		        {
					if(_AppMobile_W == null)
	        	    {
						_AppMobile_W = TearOff.AppMobile;
					}
					return _AppMobile_W;
				}
			}

			public AggregateParameter AppPhone
		    {
				get
		        {
					if(_AppPhone_W == null)
	        	    {
						_AppPhone_W = TearOff.AppPhone;
					}
					return _AppPhone_W;
				}
			}

			public AggregateParameter AppGender
		    {
				get
		        {
					if(_AppGender_W == null)
	        	    {
						_AppGender_W = TearOff.AppGender;
					}
					return _AppGender_W;
				}
			}

			public AggregateParameter AppPincode
		    {
				get
		        {
					if(_AppPincode_W == null)
	        	    {
						_AppPincode_W = TearOff.AppPincode;
					}
					return _AppPincode_W;
				}
			}

			public AggregateParameter AppIsVerified
		    {
				get
		        {
					if(_AppIsVerified_W == null)
	        	    {
						_AppIsVerified_W = TearOff.AppIsVerified;
					}
					return _AppIsVerified_W;
				}
			}

			public AggregateParameter AppImage
		    {
				get
		        {
					if(_AppImage_W == null)
	        	    {
						_AppImage_W = TearOff.AppImage;
					}
					return _AppImage_W;
				}
			}

			public AggregateParameter AppIsActive
		    {
				get
		        {
					if(_AppIsActive_W == null)
	        	    {
						_AppIsActive_W = TearOff.AppIsActive;
					}
					return _AppIsActive_W;
				}
			}

			public AggregateParameter AppIsNewsLetter
		    {
				get
		        {
					if(_AppIsNewsLetter_W == null)
	        	    {
						_AppIsNewsLetter_W = TearOff.AppIsNewsLetter;
					}
					return _AppIsNewsLetter_W;
				}
			}

			public AggregateParameter AppAddress
		    {
				get
		        {
					if(_AppAddress_W == null)
	        	    {
						_AppAddress_W = TearOff.AppAddress;
					}
					return _AppAddress_W;
				}
			}

			public AggregateParameter AppCreatedDate
		    {
				get
		        {
					if(_AppCreatedDate_W == null)
	        	    {
						_AppCreatedDate_W = TearOff.AppCreatedDate;
					}
					return _AppCreatedDate_W;
				}
			}

			public AggregateParameter AppStateId
		    {
				get
		        {
					if(_AppStateId_W == null)
	        	    {
						_AppStateId_W = TearOff.AppStateId;
					}
					return _AppStateId_W;
				}
			}

			public AggregateParameter AppCountryId
		    {
				get
		        {
					if(_AppCountryId_W == null)
	        	    {
						_AppCountryId_W = TearOff.AppCountryId;
					}
					return _AppCountryId_W;
				}
			}

			public AggregateParameter AppCityId
		    {
				get
		        {
					if(_AppCityId_W == null)
	        	    {
						_AppCityId_W = TearOff.AppCityId;
					}
					return _AppCityId_W;
				}
			}

			private AggregateParameter _AppCustomerID_W = null;
			private AggregateParameter _AppFirstName_W = null;
			private AggregateParameter _AppLastName_W = null;
			private AggregateParameter _AppEmailID_W = null;
			private AggregateParameter _AppPassword_W = null;
			private AggregateParameter _AppMobile_W = null;
			private AggregateParameter _AppPhone_W = null;
			private AggregateParameter _AppGender_W = null;
			private AggregateParameter _AppPincode_W = null;
			private AggregateParameter _AppIsVerified_W = null;
			private AggregateParameter _AppImage_W = null;
			private AggregateParameter _AppIsActive_W = null;
			private AggregateParameter _AppIsNewsLetter_W = null;
			private AggregateParameter _AppAddress_W = null;
			private AggregateParameter _AppCreatedDate_W = null;
			private AggregateParameter _AppStateId_W = null;
			private AggregateParameter _AppCountryId_W = null;
			private AggregateParameter _AppCityId_W = null;

			public void AggregateClauseReset()
			{
				_AppCustomerID_W = null;
				_AppFirstName_W = null;
				_AppLastName_W = null;
				_AppEmailID_W = null;
				_AppPassword_W = null;
				_AppMobile_W = null;
				_AppPhone_W = null;
				_AppGender_W = null;
				_AppPincode_W = null;
				_AppIsVerified_W = null;
				_AppImage_W = null;
				_AppIsActive_W = null;
				_AppIsNewsLetter_W = null;
				_AppAddress_W = null;
				_AppCreatedDate_W = null;
				_AppStateId_W = null;
				_AppCountryId_W = null;
				_AppCityId_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblCustomerInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.AppCustomerID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblCustomerUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblCustomerDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.AppCustomerID);
			p.SourceColumn = ColumnNames.AppCustomerID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.AppCustomerID);
			p.SourceColumn = ColumnNames.AppCustomerID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppFirstName);
			p.SourceColumn = ColumnNames.AppFirstName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppLastName);
			p.SourceColumn = ColumnNames.AppLastName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppEmailID);
			p.SourceColumn = ColumnNames.AppEmailID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppPassword);
			p.SourceColumn = ColumnNames.AppPassword;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppMobile);
			p.SourceColumn = ColumnNames.AppMobile;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppPhone);
			p.SourceColumn = ColumnNames.AppPhone;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppGender);
			p.SourceColumn = ColumnNames.AppGender;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppPincode);
			p.SourceColumn = ColumnNames.AppPincode;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppIsVerified);
			p.SourceColumn = ColumnNames.AppIsVerified;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppImage);
			p.SourceColumn = ColumnNames.AppImage;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppIsActive);
			p.SourceColumn = ColumnNames.AppIsActive;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppIsNewsLetter);
			p.SourceColumn = ColumnNames.AppIsNewsLetter;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppAddress);
			p.SourceColumn = ColumnNames.AppAddress;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppCreatedDate);
			p.SourceColumn = ColumnNames.AppCreatedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppStateId);
			p.SourceColumn = ColumnNames.AppStateId;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppCountryId);
			p.SourceColumn = ColumnNames.AppCountryId;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppCityId);
			p.SourceColumn = ColumnNames.AppCityId;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
