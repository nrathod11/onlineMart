
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace BusinessLayer
{
	public abstract class _tblUser : SqlClientEntity
	{
		public _tblUser()
		{
			this.QuerySource = "tblUser";
			this.MappingName = "tblUser";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblUserLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int AppUserId)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.AppUserId, AppUserId);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblUserLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter AppUserId
			{
				get
				{
					return new SqlParameter("@AppUserId", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AppRoleId
			{
				get
				{
					return new SqlParameter("@AppRoleId", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AppUserName
			{
				get
				{
					return new SqlParameter("@AppUserName", SqlDbType.NVarChar, 25);
				}
			}
			
			public static SqlParameter AppPassword
			{
				get
				{
					return new SqlParameter("@AppPassword", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter AppFullName
			{
				get
				{
					return new SqlParameter("@AppFullName", SqlDbType.NVarChar, 25);
				}
			}
			
			public static SqlParameter AppMobile
			{
				get
				{
					return new SqlParameter("@AppMobile", SqlDbType.NVarChar, 15);
				}
			}
			
			public static SqlParameter AppPhone
			{
				get
				{
					return new SqlParameter("@AppPhone", SqlDbType.NVarChar, 15);
				}
			}
			
			public static SqlParameter AppEmail
			{
				get
				{
					return new SqlParameter("@AppEmail", SqlDbType.NVarChar, 30);
				}
			}
			
			public static SqlParameter AppAddress
			{
				get
				{
					return new SqlParameter("@AppAddress", SqlDbType.NVarChar, 150);
				}
			}
			
			public static SqlParameter AppIsActive
			{
				get
				{
					return new SqlParameter("@AppIsActive", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AppIsSuperAdmin
			{
				get
				{
					return new SqlParameter("@AppIsSuperAdmin", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AppLastLoginTime
			{
				get
				{
					return new SqlParameter("@AppLastLoginTime", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter AppCreatedDate
			{
				get
				{
					return new SqlParameter("@AppCreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter AppCreatedBy
			{
				get
				{
					return new SqlParameter("@AppCreatedBy", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AppPhoto
			{
				get
				{
					return new SqlParameter("@AppPhoto", SqlDbType.VarChar, 100);
				}
			}
			
			public static SqlParameter AppDescription
			{
				get
				{
					return new SqlParameter("@AppDescription", SqlDbType.VarChar, 2147483647);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string AppUserId = "appUserId";
            public const string AppRoleId = "appRoleId";
            public const string AppUserName = "appUserName";
            public const string AppPassword = "appPassword";
            public const string AppFullName = "appFullName";
            public const string AppMobile = "appMobile";
            public const string AppPhone = "appPhone";
            public const string AppEmail = "appEmail";
            public const string AppAddress = "appAddress";
            public const string AppIsActive = "appIsActive";
            public const string AppIsSuperAdmin = "appIsSuperAdmin";
            public const string AppLastLoginTime = "appLastLoginTime";
            public const string AppCreatedDate = "appCreatedDate";
            public const string AppCreatedBy = "appCreatedBy";
            public const string AppPhoto = "appPhoto";
            public const string AppDescription = "appDescription";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[AppUserId] = _tblUser.PropertyNames.AppUserId;
					ht[AppRoleId] = _tblUser.PropertyNames.AppRoleId;
					ht[AppUserName] = _tblUser.PropertyNames.AppUserName;
					ht[AppPassword] = _tblUser.PropertyNames.AppPassword;
					ht[AppFullName] = _tblUser.PropertyNames.AppFullName;
					ht[AppMobile] = _tblUser.PropertyNames.AppMobile;
					ht[AppPhone] = _tblUser.PropertyNames.AppPhone;
					ht[AppEmail] = _tblUser.PropertyNames.AppEmail;
					ht[AppAddress] = _tblUser.PropertyNames.AppAddress;
					ht[AppIsActive] = _tblUser.PropertyNames.AppIsActive;
					ht[AppIsSuperAdmin] = _tblUser.PropertyNames.AppIsSuperAdmin;
					ht[AppLastLoginTime] = _tblUser.PropertyNames.AppLastLoginTime;
					ht[AppCreatedDate] = _tblUser.PropertyNames.AppCreatedDate;
					ht[AppCreatedBy] = _tblUser.PropertyNames.AppCreatedBy;
					ht[AppPhoto] = _tblUser.PropertyNames.AppPhoto;
					ht[AppDescription] = _tblUser.PropertyNames.AppDescription;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string AppUserId = "AppUserId";
            public const string AppRoleId = "AppRoleId";
            public const string AppUserName = "AppUserName";
            public const string AppPassword = "AppPassword";
            public const string AppFullName = "AppFullName";
            public const string AppMobile = "AppMobile";
            public const string AppPhone = "AppPhone";
            public const string AppEmail = "AppEmail";
            public const string AppAddress = "AppAddress";
            public const string AppIsActive = "AppIsActive";
            public const string AppIsSuperAdmin = "AppIsSuperAdmin";
            public const string AppLastLoginTime = "AppLastLoginTime";
            public const string AppCreatedDate = "AppCreatedDate";
            public const string AppCreatedBy = "AppCreatedBy";
            public const string AppPhoto = "AppPhoto";
            public const string AppDescription = "AppDescription";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[AppUserId] = _tblUser.ColumnNames.AppUserId;
					ht[AppRoleId] = _tblUser.ColumnNames.AppRoleId;
					ht[AppUserName] = _tblUser.ColumnNames.AppUserName;
					ht[AppPassword] = _tblUser.ColumnNames.AppPassword;
					ht[AppFullName] = _tblUser.ColumnNames.AppFullName;
					ht[AppMobile] = _tblUser.ColumnNames.AppMobile;
					ht[AppPhone] = _tblUser.ColumnNames.AppPhone;
					ht[AppEmail] = _tblUser.ColumnNames.AppEmail;
					ht[AppAddress] = _tblUser.ColumnNames.AppAddress;
					ht[AppIsActive] = _tblUser.ColumnNames.AppIsActive;
					ht[AppIsSuperAdmin] = _tblUser.ColumnNames.AppIsSuperAdmin;
					ht[AppLastLoginTime] = _tblUser.ColumnNames.AppLastLoginTime;
					ht[AppCreatedDate] = _tblUser.ColumnNames.AppCreatedDate;
					ht[AppCreatedBy] = _tblUser.ColumnNames.AppCreatedBy;
					ht[AppPhoto] = _tblUser.ColumnNames.AppPhoto;
					ht[AppDescription] = _tblUser.ColumnNames.AppDescription;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string AppUserId = "s_AppUserId";
            public const string AppRoleId = "s_AppRoleId";
            public const string AppUserName = "s_AppUserName";
            public const string AppPassword = "s_AppPassword";
            public const string AppFullName = "s_AppFullName";
            public const string AppMobile = "s_AppMobile";
            public const string AppPhone = "s_AppPhone";
            public const string AppEmail = "s_AppEmail";
            public const string AppAddress = "s_AppAddress";
            public const string AppIsActive = "s_AppIsActive";
            public const string AppIsSuperAdmin = "s_AppIsSuperAdmin";
            public const string AppLastLoginTime = "s_AppLastLoginTime";
            public const string AppCreatedDate = "s_AppCreatedDate";
            public const string AppCreatedBy = "s_AppCreatedBy";
            public const string AppPhoto = "s_AppPhoto";
            public const string AppDescription = "s_AppDescription";

		}
		#endregion		
		
		#region Properties
	
		public virtual int AppUserId
	    {
			get
	        {
				return base.Getint(ColumnNames.AppUserId);
			}
			set
	        {
				base.Setint(ColumnNames.AppUserId, value);
			}
		}

		public virtual int AppRoleId
	    {
			get
	        {
				return base.Getint(ColumnNames.AppRoleId);
			}
			set
	        {
				base.Setint(ColumnNames.AppRoleId, value);
			}
		}

		public virtual string AppUserName
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppUserName);
			}
			set
	        {
				base.Setstring(ColumnNames.AppUserName, value);
			}
		}

		public virtual string AppPassword
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppPassword);
			}
			set
	        {
				base.Setstring(ColumnNames.AppPassword, value);
			}
		}

		public virtual string AppFullName
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppFullName);
			}
			set
	        {
				base.Setstring(ColumnNames.AppFullName, value);
			}
		}

		public virtual string AppMobile
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppMobile);
			}
			set
	        {
				base.Setstring(ColumnNames.AppMobile, value);
			}
		}

		public virtual string AppPhone
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppPhone);
			}
			set
	        {
				base.Setstring(ColumnNames.AppPhone, value);
			}
		}

		public virtual string AppEmail
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppEmail);
			}
			set
	        {
				base.Setstring(ColumnNames.AppEmail, value);
			}
		}

		public virtual string AppAddress
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppAddress);
			}
			set
	        {
				base.Setstring(ColumnNames.AppAddress, value);
			}
		}

		public virtual bool AppIsActive
	    {
			get
	        {
				return base.Getbool(ColumnNames.AppIsActive);
			}
			set
	        {
				base.Setbool(ColumnNames.AppIsActive, value);
			}
		}

		public virtual bool AppIsSuperAdmin
	    {
			get
	        {
				return base.Getbool(ColumnNames.AppIsSuperAdmin);
			}
			set
	        {
				base.Setbool(ColumnNames.AppIsSuperAdmin, value);
			}
		}

		public virtual DateTime AppLastLoginTime
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.AppLastLoginTime);
			}
			set
	        {
				base.SetDateTime(ColumnNames.AppLastLoginTime, value);
			}
		}

		public virtual DateTime AppCreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.AppCreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.AppCreatedDate, value);
			}
		}

		public virtual int AppCreatedBy
	    {
			get
	        {
				return base.Getint(ColumnNames.AppCreatedBy);
			}
			set
	        {
				base.Setint(ColumnNames.AppCreatedBy, value);
			}
		}

		public virtual string AppPhoto
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppPhoto);
			}
			set
	        {
				base.Setstring(ColumnNames.AppPhoto, value);
			}
		}

		public virtual string AppDescription
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppDescription);
			}
			set
	        {
				base.Setstring(ColumnNames.AppDescription, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_AppUserId
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppUserId) ? string.Empty : base.GetintAsString(ColumnNames.AppUserId);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppUserId);
				else
					this.AppUserId = base.SetintAsString(ColumnNames.AppUserId, value);
			}
		}

		public virtual string s_AppRoleId
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppRoleId) ? string.Empty : base.GetintAsString(ColumnNames.AppRoleId);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppRoleId);
				else
					this.AppRoleId = base.SetintAsString(ColumnNames.AppRoleId, value);
			}
		}

		public virtual string s_AppUserName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppUserName) ? string.Empty : base.GetstringAsString(ColumnNames.AppUserName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppUserName);
				else
					this.AppUserName = base.SetstringAsString(ColumnNames.AppUserName, value);
			}
		}

		public virtual string s_AppPassword
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppPassword) ? string.Empty : base.GetstringAsString(ColumnNames.AppPassword);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppPassword);
				else
					this.AppPassword = base.SetstringAsString(ColumnNames.AppPassword, value);
			}
		}

		public virtual string s_AppFullName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppFullName) ? string.Empty : base.GetstringAsString(ColumnNames.AppFullName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppFullName);
				else
					this.AppFullName = base.SetstringAsString(ColumnNames.AppFullName, value);
			}
		}

		public virtual string s_AppMobile
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppMobile) ? string.Empty : base.GetstringAsString(ColumnNames.AppMobile);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppMobile);
				else
					this.AppMobile = base.SetstringAsString(ColumnNames.AppMobile, value);
			}
		}

		public virtual string s_AppPhone
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppPhone) ? string.Empty : base.GetstringAsString(ColumnNames.AppPhone);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppPhone);
				else
					this.AppPhone = base.SetstringAsString(ColumnNames.AppPhone, value);
			}
		}

		public virtual string s_AppEmail
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppEmail) ? string.Empty : base.GetstringAsString(ColumnNames.AppEmail);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppEmail);
				else
					this.AppEmail = base.SetstringAsString(ColumnNames.AppEmail, value);
			}
		}

		public virtual string s_AppAddress
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppAddress) ? string.Empty : base.GetstringAsString(ColumnNames.AppAddress);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppAddress);
				else
					this.AppAddress = base.SetstringAsString(ColumnNames.AppAddress, value);
			}
		}

		public virtual string s_AppIsActive
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppIsActive) ? string.Empty : base.GetboolAsString(ColumnNames.AppIsActive);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppIsActive);
				else
					this.AppIsActive = base.SetboolAsString(ColumnNames.AppIsActive, value);
			}
		}

		public virtual string s_AppIsSuperAdmin
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppIsSuperAdmin) ? string.Empty : base.GetboolAsString(ColumnNames.AppIsSuperAdmin);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppIsSuperAdmin);
				else
					this.AppIsSuperAdmin = base.SetboolAsString(ColumnNames.AppIsSuperAdmin, value);
			}
		}

		public virtual string s_AppLastLoginTime
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppLastLoginTime) ? string.Empty : base.GetDateTimeAsString(ColumnNames.AppLastLoginTime);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppLastLoginTime);
				else
					this.AppLastLoginTime = base.SetDateTimeAsString(ColumnNames.AppLastLoginTime, value);
			}
		}

		public virtual string s_AppCreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppCreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.AppCreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppCreatedDate);
				else
					this.AppCreatedDate = base.SetDateTimeAsString(ColumnNames.AppCreatedDate, value);
			}
		}

		public virtual string s_AppCreatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppCreatedBy) ? string.Empty : base.GetintAsString(ColumnNames.AppCreatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppCreatedBy);
				else
					this.AppCreatedBy = base.SetintAsString(ColumnNames.AppCreatedBy, value);
			}
		}

		public virtual string s_AppPhoto
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppPhoto) ? string.Empty : base.GetstringAsString(ColumnNames.AppPhoto);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppPhoto);
				else
					this.AppPhoto = base.SetstringAsString(ColumnNames.AppPhoto, value);
			}
		}

		public virtual string s_AppDescription
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppDescription) ? string.Empty : base.GetstringAsString(ColumnNames.AppDescription);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppDescription);
				else
					this.AppDescription = base.SetstringAsString(ColumnNames.AppDescription, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter AppUserId
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppUserId, Parameters.AppUserId);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppRoleId
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppRoleId, Parameters.AppRoleId);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppUserName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppUserName, Parameters.AppUserName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppPassword
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppPassword, Parameters.AppPassword);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppFullName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppFullName, Parameters.AppFullName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppMobile
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppMobile, Parameters.AppMobile);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppPhone
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppPhone, Parameters.AppPhone);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppEmail
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppEmail, Parameters.AppEmail);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppAddress
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppAddress, Parameters.AppAddress);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppIsActive
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppIsActive, Parameters.AppIsActive);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppIsSuperAdmin
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppIsSuperAdmin, Parameters.AppIsSuperAdmin);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppLastLoginTime
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppLastLoginTime, Parameters.AppLastLoginTime);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppCreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppCreatedDate, Parameters.AppCreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppCreatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppCreatedBy, Parameters.AppCreatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppPhoto
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppPhoto, Parameters.AppPhoto);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppDescription
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppDescription, Parameters.AppDescription);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter AppUserId
		    {
				get
		        {
					if(_AppUserId_W == null)
	        	    {
						_AppUserId_W = TearOff.AppUserId;
					}
					return _AppUserId_W;
				}
			}

			public WhereParameter AppRoleId
		    {
				get
		        {
					if(_AppRoleId_W == null)
	        	    {
						_AppRoleId_W = TearOff.AppRoleId;
					}
					return _AppRoleId_W;
				}
			}

			public WhereParameter AppUserName
		    {
				get
		        {
					if(_AppUserName_W == null)
	        	    {
						_AppUserName_W = TearOff.AppUserName;
					}
					return _AppUserName_W;
				}
			}

			public WhereParameter AppPassword
		    {
				get
		        {
					if(_AppPassword_W == null)
	        	    {
						_AppPassword_W = TearOff.AppPassword;
					}
					return _AppPassword_W;
				}
			}

			public WhereParameter AppFullName
		    {
				get
		        {
					if(_AppFullName_W == null)
	        	    {
						_AppFullName_W = TearOff.AppFullName;
					}
					return _AppFullName_W;
				}
			}

			public WhereParameter AppMobile
		    {
				get
		        {
					if(_AppMobile_W == null)
	        	    {
						_AppMobile_W = TearOff.AppMobile;
					}
					return _AppMobile_W;
				}
			}

			public WhereParameter AppPhone
		    {
				get
		        {
					if(_AppPhone_W == null)
	        	    {
						_AppPhone_W = TearOff.AppPhone;
					}
					return _AppPhone_W;
				}
			}

			public WhereParameter AppEmail
		    {
				get
		        {
					if(_AppEmail_W == null)
	        	    {
						_AppEmail_W = TearOff.AppEmail;
					}
					return _AppEmail_W;
				}
			}

			public WhereParameter AppAddress
		    {
				get
		        {
					if(_AppAddress_W == null)
	        	    {
						_AppAddress_W = TearOff.AppAddress;
					}
					return _AppAddress_W;
				}
			}

			public WhereParameter AppIsActive
		    {
				get
		        {
					if(_AppIsActive_W == null)
	        	    {
						_AppIsActive_W = TearOff.AppIsActive;
					}
					return _AppIsActive_W;
				}
			}

			public WhereParameter AppIsSuperAdmin
		    {
				get
		        {
					if(_AppIsSuperAdmin_W == null)
	        	    {
						_AppIsSuperAdmin_W = TearOff.AppIsSuperAdmin;
					}
					return _AppIsSuperAdmin_W;
				}
			}

			public WhereParameter AppLastLoginTime
		    {
				get
		        {
					if(_AppLastLoginTime_W == null)
	        	    {
						_AppLastLoginTime_W = TearOff.AppLastLoginTime;
					}
					return _AppLastLoginTime_W;
				}
			}

			public WhereParameter AppCreatedDate
		    {
				get
		        {
					if(_AppCreatedDate_W == null)
	        	    {
						_AppCreatedDate_W = TearOff.AppCreatedDate;
					}
					return _AppCreatedDate_W;
				}
			}

			public WhereParameter AppCreatedBy
		    {
				get
		        {
					if(_AppCreatedBy_W == null)
	        	    {
						_AppCreatedBy_W = TearOff.AppCreatedBy;
					}
					return _AppCreatedBy_W;
				}
			}

			public WhereParameter AppPhoto
		    {
				get
		        {
					if(_AppPhoto_W == null)
	        	    {
						_AppPhoto_W = TearOff.AppPhoto;
					}
					return _AppPhoto_W;
				}
			}

			public WhereParameter AppDescription
		    {
				get
		        {
					if(_AppDescription_W == null)
	        	    {
						_AppDescription_W = TearOff.AppDescription;
					}
					return _AppDescription_W;
				}
			}

			private WhereParameter _AppUserId_W = null;
			private WhereParameter _AppRoleId_W = null;
			private WhereParameter _AppUserName_W = null;
			private WhereParameter _AppPassword_W = null;
			private WhereParameter _AppFullName_W = null;
			private WhereParameter _AppMobile_W = null;
			private WhereParameter _AppPhone_W = null;
			private WhereParameter _AppEmail_W = null;
			private WhereParameter _AppAddress_W = null;
			private WhereParameter _AppIsActive_W = null;
			private WhereParameter _AppIsSuperAdmin_W = null;
			private WhereParameter _AppLastLoginTime_W = null;
			private WhereParameter _AppCreatedDate_W = null;
			private WhereParameter _AppCreatedBy_W = null;
			private WhereParameter _AppPhoto_W = null;
			private WhereParameter _AppDescription_W = null;

			public void WhereClauseReset()
			{
				_AppUserId_W = null;
				_AppRoleId_W = null;
				_AppUserName_W = null;
				_AppPassword_W = null;
				_AppFullName_W = null;
				_AppMobile_W = null;
				_AppPhone_W = null;
				_AppEmail_W = null;
				_AppAddress_W = null;
				_AppIsActive_W = null;
				_AppIsSuperAdmin_W = null;
				_AppLastLoginTime_W = null;
				_AppCreatedDate_W = null;
				_AppCreatedBy_W = null;
				_AppPhoto_W = null;
				_AppDescription_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter AppUserId
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppUserId, Parameters.AppUserId);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppRoleId
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppRoleId, Parameters.AppRoleId);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppUserName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppUserName, Parameters.AppUserName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppPassword
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppPassword, Parameters.AppPassword);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppFullName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppFullName, Parameters.AppFullName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppMobile
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppMobile, Parameters.AppMobile);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppPhone
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppPhone, Parameters.AppPhone);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppEmail
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppEmail, Parameters.AppEmail);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppAddress
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppAddress, Parameters.AppAddress);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppIsActive
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppIsActive, Parameters.AppIsActive);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppIsSuperAdmin
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppIsSuperAdmin, Parameters.AppIsSuperAdmin);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppLastLoginTime
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppLastLoginTime, Parameters.AppLastLoginTime);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppCreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppCreatedDate, Parameters.AppCreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppCreatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppCreatedBy, Parameters.AppCreatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppPhoto
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppPhoto, Parameters.AppPhoto);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppDescription
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppDescription, Parameters.AppDescription);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter AppUserId
		    {
				get
		        {
					if(_AppUserId_W == null)
	        	    {
						_AppUserId_W = TearOff.AppUserId;
					}
					return _AppUserId_W;
				}
			}

			public AggregateParameter AppRoleId
		    {
				get
		        {
					if(_AppRoleId_W == null)
	        	    {
						_AppRoleId_W = TearOff.AppRoleId;
					}
					return _AppRoleId_W;
				}
			}

			public AggregateParameter AppUserName
		    {
				get
		        {
					if(_AppUserName_W == null)
	        	    {
						_AppUserName_W = TearOff.AppUserName;
					}
					return _AppUserName_W;
				}
			}

			public AggregateParameter AppPassword
		    {
				get
		        {
					if(_AppPassword_W == null)
	        	    {
						_AppPassword_W = TearOff.AppPassword;
					}
					return _AppPassword_W;
				}
			}

			public AggregateParameter AppFullName
		    {
				get
		        {
					if(_AppFullName_W == null)
	        	    {
						_AppFullName_W = TearOff.AppFullName;
					}
					return _AppFullName_W;
				}
			}

			public AggregateParameter AppMobile
		    {
				get
		        {
					if(_AppMobile_W == null)
	        	    {
						_AppMobile_W = TearOff.AppMobile;
					}
					return _AppMobile_W;
				}
			}

			public AggregateParameter AppPhone
		    {
				get
		        {
					if(_AppPhone_W == null)
	        	    {
						_AppPhone_W = TearOff.AppPhone;
					}
					return _AppPhone_W;
				}
			}

			public AggregateParameter AppEmail
		    {
				get
		        {
					if(_AppEmail_W == null)
	        	    {
						_AppEmail_W = TearOff.AppEmail;
					}
					return _AppEmail_W;
				}
			}

			public AggregateParameter AppAddress
		    {
				get
		        {
					if(_AppAddress_W == null)
	        	    {
						_AppAddress_W = TearOff.AppAddress;
					}
					return _AppAddress_W;
				}
			}

			public AggregateParameter AppIsActive
		    {
				get
		        {
					if(_AppIsActive_W == null)
	        	    {
						_AppIsActive_W = TearOff.AppIsActive;
					}
					return _AppIsActive_W;
				}
			}

			public AggregateParameter AppIsSuperAdmin
		    {
				get
		        {
					if(_AppIsSuperAdmin_W == null)
	        	    {
						_AppIsSuperAdmin_W = TearOff.AppIsSuperAdmin;
					}
					return _AppIsSuperAdmin_W;
				}
			}

			public AggregateParameter AppLastLoginTime
		    {
				get
		        {
					if(_AppLastLoginTime_W == null)
	        	    {
						_AppLastLoginTime_W = TearOff.AppLastLoginTime;
					}
					return _AppLastLoginTime_W;
				}
			}

			public AggregateParameter AppCreatedDate
		    {
				get
		        {
					if(_AppCreatedDate_W == null)
	        	    {
						_AppCreatedDate_W = TearOff.AppCreatedDate;
					}
					return _AppCreatedDate_W;
				}
			}

			public AggregateParameter AppCreatedBy
		    {
				get
		        {
					if(_AppCreatedBy_W == null)
	        	    {
						_AppCreatedBy_W = TearOff.AppCreatedBy;
					}
					return _AppCreatedBy_W;
				}
			}

			public AggregateParameter AppPhoto
		    {
				get
		        {
					if(_AppPhoto_W == null)
	        	    {
						_AppPhoto_W = TearOff.AppPhoto;
					}
					return _AppPhoto_W;
				}
			}

			public AggregateParameter AppDescription
		    {
				get
		        {
					if(_AppDescription_W == null)
	        	    {
						_AppDescription_W = TearOff.AppDescription;
					}
					return _AppDescription_W;
				}
			}

			private AggregateParameter _AppUserId_W = null;
			private AggregateParameter _AppRoleId_W = null;
			private AggregateParameter _AppUserName_W = null;
			private AggregateParameter _AppPassword_W = null;
			private AggregateParameter _AppFullName_W = null;
			private AggregateParameter _AppMobile_W = null;
			private AggregateParameter _AppPhone_W = null;
			private AggregateParameter _AppEmail_W = null;
			private AggregateParameter _AppAddress_W = null;
			private AggregateParameter _AppIsActive_W = null;
			private AggregateParameter _AppIsSuperAdmin_W = null;
			private AggregateParameter _AppLastLoginTime_W = null;
			private AggregateParameter _AppCreatedDate_W = null;
			private AggregateParameter _AppCreatedBy_W = null;
			private AggregateParameter _AppPhoto_W = null;
			private AggregateParameter _AppDescription_W = null;

			public void AggregateClauseReset()
			{
				_AppUserId_W = null;
				_AppRoleId_W = null;
				_AppUserName_W = null;
				_AppPassword_W = null;
				_AppFullName_W = null;
				_AppMobile_W = null;
				_AppPhone_W = null;
				_AppEmail_W = null;
				_AppAddress_W = null;
				_AppIsActive_W = null;
				_AppIsSuperAdmin_W = null;
				_AppLastLoginTime_W = null;
				_AppCreatedDate_W = null;
				_AppCreatedBy_W = null;
				_AppPhoto_W = null;
				_AppDescription_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblUserInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.AppUserId.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblUserUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblUserDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.AppUserId);
			p.SourceColumn = ColumnNames.AppUserId;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.AppUserId);
			p.SourceColumn = ColumnNames.AppUserId;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppRoleId);
			p.SourceColumn = ColumnNames.AppRoleId;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppUserName);
			p.SourceColumn = ColumnNames.AppUserName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppPassword);
			p.SourceColumn = ColumnNames.AppPassword;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppFullName);
			p.SourceColumn = ColumnNames.AppFullName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppMobile);
			p.SourceColumn = ColumnNames.AppMobile;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppPhone);
			p.SourceColumn = ColumnNames.AppPhone;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppEmail);
			p.SourceColumn = ColumnNames.AppEmail;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppAddress);
			p.SourceColumn = ColumnNames.AppAddress;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppIsActive);
			p.SourceColumn = ColumnNames.AppIsActive;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppIsSuperAdmin);
			p.SourceColumn = ColumnNames.AppIsSuperAdmin;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppLastLoginTime);
			p.SourceColumn = ColumnNames.AppLastLoginTime;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppCreatedDate);
			p.SourceColumn = ColumnNames.AppCreatedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppCreatedBy);
			p.SourceColumn = ColumnNames.AppCreatedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppPhoto);
			p.SourceColumn = ColumnNames.AppPhoto;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppDescription);
			p.SourceColumn = ColumnNames.AppDescription;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
