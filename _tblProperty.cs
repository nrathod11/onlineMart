
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace BusinessLayer
{
	public abstract class _tblProperty : SqlClientEntity
	{
		public _tblProperty()
		{
			this.QuerySource = "tblProperty";
			this.MappingName = "tblProperty";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblPropertyLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int AppPropertyID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.AppPropertyID, AppPropertyID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tblPropertyLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter AppPropertyID
			{
				get
				{
					return new SqlParameter("@AppPropertyID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AppPropertyName
			{
				get
				{
					return new SqlParameter("@AppPropertyName", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter AppDisplayName
			{
				get
				{
					return new SqlParameter("@AppDisplayName", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter AppDescription
			{
				get
				{
					return new SqlParameter("@AppDescription", SqlDbType.VarChar, 250);
				}
			}
			
			public static SqlParameter AppCreatedBy
			{
				get
				{
					return new SqlParameter("@AppCreatedBy", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter AppCreatedDate
			{
				get
				{
					return new SqlParameter("@AppCreatedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter AppIsPredefine
			{
				get
				{
					return new SqlParameter("@AppIsPredefine", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AppIsShowInSearch
			{
				get
				{
					return new SqlParameter("@AppIsShowInSearch", SqlDbType.Bit, 0);
				}
			}
			
			public static SqlParameter AppDisplayOrder
			{
				get
				{
					return new SqlParameter("@AppDisplayOrder", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string AppPropertyID = "appPropertyID";
            public const string AppPropertyName = "appPropertyName";
            public const string AppDisplayName = "appDisplayName";
            public const string AppDescription = "appDescription";
            public const string AppCreatedBy = "appCreatedBy";
            public const string AppCreatedDate = "appCreatedDate";
            public const string AppIsPredefine = "appIsPredefine";
            public const string AppIsShowInSearch = "appIsShowInSearch";
            public const string AppDisplayOrder = "appDisplayOrder";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[AppPropertyID] = _tblProperty.PropertyNames.AppPropertyID;
					ht[AppPropertyName] = _tblProperty.PropertyNames.AppPropertyName;
					ht[AppDisplayName] = _tblProperty.PropertyNames.AppDisplayName;
					ht[AppDescription] = _tblProperty.PropertyNames.AppDescription;
					ht[AppCreatedBy] = _tblProperty.PropertyNames.AppCreatedBy;
					ht[AppCreatedDate] = _tblProperty.PropertyNames.AppCreatedDate;
					ht[AppIsPredefine] = _tblProperty.PropertyNames.AppIsPredefine;
					ht[AppIsShowInSearch] = _tblProperty.PropertyNames.AppIsShowInSearch;
					ht[AppDisplayOrder] = _tblProperty.PropertyNames.AppDisplayOrder;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string AppPropertyID = "AppPropertyID";
            public const string AppPropertyName = "AppPropertyName";
            public const string AppDisplayName = "AppDisplayName";
            public const string AppDescription = "AppDescription";
            public const string AppCreatedBy = "AppCreatedBy";
            public const string AppCreatedDate = "AppCreatedDate";
            public const string AppIsPredefine = "AppIsPredefine";
            public const string AppIsShowInSearch = "AppIsShowInSearch";
            public const string AppDisplayOrder = "AppDisplayOrder";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[AppPropertyID] = _tblProperty.ColumnNames.AppPropertyID;
					ht[AppPropertyName] = _tblProperty.ColumnNames.AppPropertyName;
					ht[AppDisplayName] = _tblProperty.ColumnNames.AppDisplayName;
					ht[AppDescription] = _tblProperty.ColumnNames.AppDescription;
					ht[AppCreatedBy] = _tblProperty.ColumnNames.AppCreatedBy;
					ht[AppCreatedDate] = _tblProperty.ColumnNames.AppCreatedDate;
					ht[AppIsPredefine] = _tblProperty.ColumnNames.AppIsPredefine;
					ht[AppIsShowInSearch] = _tblProperty.ColumnNames.AppIsShowInSearch;
					ht[AppDisplayOrder] = _tblProperty.ColumnNames.AppDisplayOrder;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string AppPropertyID = "s_AppPropertyID";
            public const string AppPropertyName = "s_AppPropertyName";
            public const string AppDisplayName = "s_AppDisplayName";
            public const string AppDescription = "s_AppDescription";
            public const string AppCreatedBy = "s_AppCreatedBy";
            public const string AppCreatedDate = "s_AppCreatedDate";
            public const string AppIsPredefine = "s_AppIsPredefine";
            public const string AppIsShowInSearch = "s_AppIsShowInSearch";
            public const string AppDisplayOrder = "s_AppDisplayOrder";

		}
		#endregion		
		
		#region Properties
	
		public virtual int AppPropertyID
	    {
			get
	        {
				return base.Getint(ColumnNames.AppPropertyID);
			}
			set
	        {
				base.Setint(ColumnNames.AppPropertyID, value);
			}
		}

		public virtual string AppPropertyName
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppPropertyName);
			}
			set
	        {
				base.Setstring(ColumnNames.AppPropertyName, value);
			}
		}

		public virtual string AppDisplayName
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppDisplayName);
			}
			set
	        {
				base.Setstring(ColumnNames.AppDisplayName, value);
			}
		}

		public virtual string AppDescription
	    {
			get
	        {
				return base.Getstring(ColumnNames.AppDescription);
			}
			set
	        {
				base.Setstring(ColumnNames.AppDescription, value);
			}
		}

		public virtual int AppCreatedBy
	    {
			get
	        {
				return base.Getint(ColumnNames.AppCreatedBy);
			}
			set
	        {
				base.Setint(ColumnNames.AppCreatedBy, value);
			}
		}

		public virtual DateTime AppCreatedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.AppCreatedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.AppCreatedDate, value);
			}
		}

		public virtual bool AppIsPredefine
	    {
			get
	        {
				return base.Getbool(ColumnNames.AppIsPredefine);
			}
			set
	        {
				base.Setbool(ColumnNames.AppIsPredefine, value);
			}
		}

		public virtual bool AppIsShowInSearch
	    {
			get
	        {
				return base.Getbool(ColumnNames.AppIsShowInSearch);
			}
			set
	        {
				base.Setbool(ColumnNames.AppIsShowInSearch, value);
			}
		}

		public virtual int AppDisplayOrder
	    {
			get
	        {
				return base.Getint(ColumnNames.AppDisplayOrder);
			}
			set
	        {
				base.Setint(ColumnNames.AppDisplayOrder, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_AppPropertyID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppPropertyID) ? string.Empty : base.GetintAsString(ColumnNames.AppPropertyID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppPropertyID);
				else
					this.AppPropertyID = base.SetintAsString(ColumnNames.AppPropertyID, value);
			}
		}

		public virtual string s_AppPropertyName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppPropertyName) ? string.Empty : base.GetstringAsString(ColumnNames.AppPropertyName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppPropertyName);
				else
					this.AppPropertyName = base.SetstringAsString(ColumnNames.AppPropertyName, value);
			}
		}

		public virtual string s_AppDisplayName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppDisplayName) ? string.Empty : base.GetstringAsString(ColumnNames.AppDisplayName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppDisplayName);
				else
					this.AppDisplayName = base.SetstringAsString(ColumnNames.AppDisplayName, value);
			}
		}

		public virtual string s_AppDescription
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppDescription) ? string.Empty : base.GetstringAsString(ColumnNames.AppDescription);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppDescription);
				else
					this.AppDescription = base.SetstringAsString(ColumnNames.AppDescription, value);
			}
		}

		public virtual string s_AppCreatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppCreatedBy) ? string.Empty : base.GetintAsString(ColumnNames.AppCreatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppCreatedBy);
				else
					this.AppCreatedBy = base.SetintAsString(ColumnNames.AppCreatedBy, value);
			}
		}

		public virtual string s_AppCreatedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppCreatedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.AppCreatedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppCreatedDate);
				else
					this.AppCreatedDate = base.SetDateTimeAsString(ColumnNames.AppCreatedDate, value);
			}
		}

		public virtual string s_AppIsPredefine
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppIsPredefine) ? string.Empty : base.GetboolAsString(ColumnNames.AppIsPredefine);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppIsPredefine);
				else
					this.AppIsPredefine = base.SetboolAsString(ColumnNames.AppIsPredefine, value);
			}
		}

		public virtual string s_AppIsShowInSearch
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppIsShowInSearch) ? string.Empty : base.GetboolAsString(ColumnNames.AppIsShowInSearch);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppIsShowInSearch);
				else
					this.AppIsShowInSearch = base.SetboolAsString(ColumnNames.AppIsShowInSearch, value);
			}
		}

		public virtual string s_AppDisplayOrder
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AppDisplayOrder) ? string.Empty : base.GetintAsString(ColumnNames.AppDisplayOrder);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AppDisplayOrder);
				else
					this.AppDisplayOrder = base.SetintAsString(ColumnNames.AppDisplayOrder, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter AppPropertyID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppPropertyID, Parameters.AppPropertyID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppPropertyName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppPropertyName, Parameters.AppPropertyName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppDisplayName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppDisplayName, Parameters.AppDisplayName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppDescription
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppDescription, Parameters.AppDescription);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppCreatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppCreatedBy, Parameters.AppCreatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppCreatedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppCreatedDate, Parameters.AppCreatedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppIsPredefine
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppIsPredefine, Parameters.AppIsPredefine);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppIsShowInSearch
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppIsShowInSearch, Parameters.AppIsShowInSearch);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AppDisplayOrder
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AppDisplayOrder, Parameters.AppDisplayOrder);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter AppPropertyID
		    {
				get
		        {
					if(_AppPropertyID_W == null)
	        	    {
						_AppPropertyID_W = TearOff.AppPropertyID;
					}
					return _AppPropertyID_W;
				}
			}

			public WhereParameter AppPropertyName
		    {
				get
		        {
					if(_AppPropertyName_W == null)
	        	    {
						_AppPropertyName_W = TearOff.AppPropertyName;
					}
					return _AppPropertyName_W;
				}
			}

			public WhereParameter AppDisplayName
		    {
				get
		        {
					if(_AppDisplayName_W == null)
	        	    {
						_AppDisplayName_W = TearOff.AppDisplayName;
					}
					return _AppDisplayName_W;
				}
			}

			public WhereParameter AppDescription
		    {
				get
		        {
					if(_AppDescription_W == null)
	        	    {
						_AppDescription_W = TearOff.AppDescription;
					}
					return _AppDescription_W;
				}
			}

			public WhereParameter AppCreatedBy
		    {
				get
		        {
					if(_AppCreatedBy_W == null)
	        	    {
						_AppCreatedBy_W = TearOff.AppCreatedBy;
					}
					return _AppCreatedBy_W;
				}
			}

			public WhereParameter AppCreatedDate
		    {
				get
		        {
					if(_AppCreatedDate_W == null)
	        	    {
						_AppCreatedDate_W = TearOff.AppCreatedDate;
					}
					return _AppCreatedDate_W;
				}
			}

			public WhereParameter AppIsPredefine
		    {
				get
		        {
					if(_AppIsPredefine_W == null)
	        	    {
						_AppIsPredefine_W = TearOff.AppIsPredefine;
					}
					return _AppIsPredefine_W;
				}
			}

			public WhereParameter AppIsShowInSearch
		    {
				get
		        {
					if(_AppIsShowInSearch_W == null)
	        	    {
						_AppIsShowInSearch_W = TearOff.AppIsShowInSearch;
					}
					return _AppIsShowInSearch_W;
				}
			}

			public WhereParameter AppDisplayOrder
		    {
				get
		        {
					if(_AppDisplayOrder_W == null)
	        	    {
						_AppDisplayOrder_W = TearOff.AppDisplayOrder;
					}
					return _AppDisplayOrder_W;
				}
			}

			private WhereParameter _AppPropertyID_W = null;
			private WhereParameter _AppPropertyName_W = null;
			private WhereParameter _AppDisplayName_W = null;
			private WhereParameter _AppDescription_W = null;
			private WhereParameter _AppCreatedBy_W = null;
			private WhereParameter _AppCreatedDate_W = null;
			private WhereParameter _AppIsPredefine_W = null;
			private WhereParameter _AppIsShowInSearch_W = null;
			private WhereParameter _AppDisplayOrder_W = null;

			public void WhereClauseReset()
			{
				_AppPropertyID_W = null;
				_AppPropertyName_W = null;
				_AppDisplayName_W = null;
				_AppDescription_W = null;
				_AppCreatedBy_W = null;
				_AppCreatedDate_W = null;
				_AppIsPredefine_W = null;
				_AppIsShowInSearch_W = null;
				_AppDisplayOrder_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter AppPropertyID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppPropertyID, Parameters.AppPropertyID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppPropertyName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppPropertyName, Parameters.AppPropertyName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppDisplayName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppDisplayName, Parameters.AppDisplayName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppDescription
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppDescription, Parameters.AppDescription);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppCreatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppCreatedBy, Parameters.AppCreatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppCreatedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppCreatedDate, Parameters.AppCreatedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppIsPredefine
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppIsPredefine, Parameters.AppIsPredefine);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppIsShowInSearch
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppIsShowInSearch, Parameters.AppIsShowInSearch);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AppDisplayOrder
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AppDisplayOrder, Parameters.AppDisplayOrder);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter AppPropertyID
		    {
				get
		        {
					if(_AppPropertyID_W == null)
	        	    {
						_AppPropertyID_W = TearOff.AppPropertyID;
					}
					return _AppPropertyID_W;
				}
			}

			public AggregateParameter AppPropertyName
		    {
				get
		        {
					if(_AppPropertyName_W == null)
	        	    {
						_AppPropertyName_W = TearOff.AppPropertyName;
					}
					return _AppPropertyName_W;
				}
			}

			public AggregateParameter AppDisplayName
		    {
				get
		        {
					if(_AppDisplayName_W == null)
	        	    {
						_AppDisplayName_W = TearOff.AppDisplayName;
					}
					return _AppDisplayName_W;
				}
			}

			public AggregateParameter AppDescription
		    {
				get
		        {
					if(_AppDescription_W == null)
	        	    {
						_AppDescription_W = TearOff.AppDescription;
					}
					return _AppDescription_W;
				}
			}

			public AggregateParameter AppCreatedBy
		    {
				get
		        {
					if(_AppCreatedBy_W == null)
	        	    {
						_AppCreatedBy_W = TearOff.AppCreatedBy;
					}
					return _AppCreatedBy_W;
				}
			}

			public AggregateParameter AppCreatedDate
		    {
				get
		        {
					if(_AppCreatedDate_W == null)
	        	    {
						_AppCreatedDate_W = TearOff.AppCreatedDate;
					}
					return _AppCreatedDate_W;
				}
			}

			public AggregateParameter AppIsPredefine
		    {
				get
		        {
					if(_AppIsPredefine_W == null)
	        	    {
						_AppIsPredefine_W = TearOff.AppIsPredefine;
					}
					return _AppIsPredefine_W;
				}
			}

			public AggregateParameter AppIsShowInSearch
		    {
				get
		        {
					if(_AppIsShowInSearch_W == null)
	        	    {
						_AppIsShowInSearch_W = TearOff.AppIsShowInSearch;
					}
					return _AppIsShowInSearch_W;
				}
			}

			public AggregateParameter AppDisplayOrder
		    {
				get
		        {
					if(_AppDisplayOrder_W == null)
	        	    {
						_AppDisplayOrder_W = TearOff.AppDisplayOrder;
					}
					return _AppDisplayOrder_W;
				}
			}

			private AggregateParameter _AppPropertyID_W = null;
			private AggregateParameter _AppPropertyName_W = null;
			private AggregateParameter _AppDisplayName_W = null;
			private AggregateParameter _AppDescription_W = null;
			private AggregateParameter _AppCreatedBy_W = null;
			private AggregateParameter _AppCreatedDate_W = null;
			private AggregateParameter _AppIsPredefine_W = null;
			private AggregateParameter _AppIsShowInSearch_W = null;
			private AggregateParameter _AppDisplayOrder_W = null;

			public void AggregateClauseReset()
			{
				_AppPropertyID_W = null;
				_AppPropertyName_W = null;
				_AppDisplayName_W = null;
				_AppDescription_W = null;
				_AppCreatedBy_W = null;
				_AppCreatedDate_W = null;
				_AppIsPredefine_W = null;
				_AppIsShowInSearch_W = null;
				_AppDisplayOrder_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblPropertyInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.AppPropertyID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblPropertyUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tblPropertyDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.AppPropertyID);
			p.SourceColumn = ColumnNames.AppPropertyID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.AppPropertyID);
			p.SourceColumn = ColumnNames.AppPropertyID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppPropertyName);
			p.SourceColumn = ColumnNames.AppPropertyName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppDisplayName);
			p.SourceColumn = ColumnNames.AppDisplayName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppDescription);
			p.SourceColumn = ColumnNames.AppDescription;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppCreatedBy);
			p.SourceColumn = ColumnNames.AppCreatedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppCreatedDate);
			p.SourceColumn = ColumnNames.AppCreatedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppIsPredefine);
			p.SourceColumn = ColumnNames.AppIsPredefine;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppIsShowInSearch);
			p.SourceColumn = ColumnNames.AppIsShowInSearch;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AppDisplayOrder);
			p.SourceColumn = ColumnNames.AppDisplayOrder;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
